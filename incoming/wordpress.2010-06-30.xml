<?xml version="1.0" encoding="UTF-8"?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your blog. -->
<!-- It contains information about your blog's posts, comments, and categories. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your blog. -->

<!-- To import this information into a WordPress blog follow these steps. -->
<!-- 1. Log into that blog as an administrator. -->
<!-- 2. Go to Tools: Import in the blog's admin panels (or Manage: Import in older versions of WordPress). -->
<!-- 3. Choose "WordPress" from the list. -->
<!-- 4. Upload this file using the form provided on that page. -->
<!-- 5. You will first be asked to map the authors in this export file to users -->
<!--    on the blog.  For each author, you may choose to map to an -->
<!--    existing user on the blog or to create a new user -->
<!-- 6. WordPress will then import each of the posts, comments, and categories -->
<!--    contained in this file into your blog -->

<!-- generator="WordPress/2.7.1" created="2010-06-30 10:07"-->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.0/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.0/"
>

<channel>
	<title>The Amazing Blog</title>
	<link>http://www.theamazingrando.com/blog</link>
	<description>Rando's Random Ramblings</description>
	<pubDate>Mon, 20 Jul 2009 04:11:45 +0000</pubDate>
	<generator>http://wordpress.org/?v=2.7.1</generator>
	<language>en</language>
	<wp:wxr_version>1.0</wp:wxr_version>
	<wp:base_site_url>http://www.theamazingrando.com/blog</wp:base_site_url>
	<wp:base_blog_url>http://www.theamazingrando.com/blog</wp:base_blog_url>
	<wp:category><wp:category_nicename>linux</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Linux]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>personal</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Personal]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>ruby</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Ruby]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>uncategorized</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>web-services</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Web Services]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>datamapper</wp:category_nicename><wp:category_parent>Ruby</wp:category_parent><wp:cat_name><![CDATA[Datamapper]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>merb</wp:category_nicename><wp:category_parent>Ruby</wp:category_parent><wp:cat_name><![CDATA[Merb]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>rails</wp:category_nicename><wp:category_parent>Ruby</wp:category_parent><wp:cat_name><![CDATA[Rails]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>resourceful</wp:category_nicename><wp:category_parent>Ruby</wp:category_parent><wp:cat_name><![CDATA[Resourceful]]></wp:cat_name></wp:category>
	<wp:tag><wp:tag_slug>arch</wp:tag_slug><wp:tag_name><![CDATA[Arch]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>arch-linux</wp:tag_slug><wp:tag_name><![CDATA[Arch Linux]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>datamapper</wp:tag_slug><wp:tag_name><![CDATA[Datamapper]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>gentoo</wp:tag_slug><wp:tag_name><![CDATA[gentoo]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>howto</wp:tag_slug><wp:tag_name><![CDATA[howto]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>http</wp:tag_slug><wp:tag_name><![CDATA[HTTP]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>http-rest</wp:tag_slug><wp:tag_name><![CDATA[http rest]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>internet</wp:tag_slug><wp:tag_name><![CDATA[Internet]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>linux</wp:tag_slug><wp:tag_name><![CDATA[Linux]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>merb</wp:tag_slug><wp:tag_name><![CDATA[Merb]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>merbcamp</wp:tag_slug><wp:tag_name><![CDATA[merbcamp]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>migrations</wp:tag_slug><wp:tag_name><![CDATA[Migrations]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>mysql</wp:tag_slug><wp:tag_name><![CDATA[MySQL]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>open-source</wp:tag_slug><wp:tag_name><![CDATA[Open Source]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>personal</wp:tag_slug><wp:tag_name><![CDATA[Personal]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>postgres</wp:tag_slug><wp:tag_name><![CDATA[Postgres]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>rails</wp:tag_slug><wp:tag_name><![CDATA[Rails]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>resourceful</wp:tag_slug><wp:tag_name><![CDATA[Resourceful]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>rest</wp:tag_slug><wp:tag_name><![CDATA[ReST]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>rspec</wp:tag_slug><wp:tag_name><![CDATA[rspec]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>ruby</wp:tag_slug><wp:tag_name><![CDATA[Ruby]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>ubuntu</wp:tag_slug><wp:tag_name><![CDATA[Ubuntu]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>zsh</wp:tag_slug><wp:tag_name><![CDATA[zsh]]></wp:tag_name></wp:tag>
		<item>
<title>Wildfires in Boulder</title>
<link>http://www.theamazingrando.com/blog/?p=71</link>
<pubDate>Tue, 30 Nov 1999 00:00:00 +0000</pubDate>
<dc:creator><![CDATA[Paul Sadauskas]]></dc:creator>

		<category><![CDATA[Ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[Ruby]]></category>

<guid isPermaLink="false">http://www.theamazingrando.com/blog/?p=71</guid>
<description></description>
<content:encoded><![CDATA[Here's the view out my kitchen window, most mornings:<br />
<a href="http://picasaweb.google.com/lh/photo/if5JeHUe16PKKCpjWYj44g?feat=embedwebsite"><img src="http://lh6.ggpht.com/_WEBSr9gkXQM/RPsquxnPABI/AAAAAAAAACQ/dbaIpaY55MU/s400/IMG_0096.JPG" /></a>

Here's what it looks like this fine evening:

<table style="width:auto;"><tr><td><a href="http://picasaweb.google.com/lh/photo/EVVxym2W0cCXxa3ZSbaGTQ?feat=embedwebsite"><img src="http://lh5.ggpht.com/_WEBSr9gkXQM/SWVQJ4kMFEI/AAAAAAAAEKQ/uKQOKm2LqxM/s400/img_0317.jpg" /></a></td></tr><tr><td style="font-family:arial,sans-serif; font-size:11px; text-align:right">From <a href="http://picasaweb.google.com/psadauskas/Fire?feat=embedwebsite">fire</a></td></tr></table>

Click the album link for more. From my porch, I can see parts of the mountainside flashing from the lights of the fire trucks. They've evacuated 11,000 homes, but the wind is blowing the fire the other direction. There have been clouds of smoke all afternoon, but once the sun set, I has able to see the flames.

More details about the fires here: http://www.dailycamera.com/news/2009/jan/07/i-70-closed-over-vail-pass-avalanche-control/]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>71</wp:post_id>
<wp:post_date>2009-01-07 18:14:42</wp:post_date>
<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name></wp:post_name>
<wp:status>draft</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1231377282</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>2</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>About Me</title>
<link>http://www.theamazingrando.com/blog/?page_id=2</link>
<pubDate>Fri, 14 Jul 2006 22:38:52 +0000</pubDate>
<dc:creator><![CDATA[rando]]></dc:creator>

		<category><![CDATA[Ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[Ruby]]></category>

<guid isPermaLink="false"></guid>
<description></description>
<content:encoded><![CDATA[I pretend to be a professional software developer, but really I just love coding, and it turns out people will pay me for that. I love discovering solutions to challenging problems, and coming up with simple yet clever code. I've found that Ruby allows for some of the most elegant solutions while remaining readable. I'm involved in several open-source projects, as both a coder and a designer. 

When I'm not staring at a monitor, I enjoy the outdoors, backpacking and rock-climbing in the Rockies and Sierra Nevada.

Hiring? Want to pay me oodles of money? [Resume][resume]

[resume]: http://sadauskas.us "Resume of Paul Sadauskas"
]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>2</wp:post_id>
<wp:post_date>2006-07-14 15:38:52</wp:post_date>
<wp:post_date_gmt>2006-07-14 22:38:52</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>about</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>page</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1211405516</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>2</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_page_template</wp:meta_key>
<wp:meta_value>default</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Rails update_attribute gotcha</title>
<link>http://www.theamazingrando.com/blog/?p=3</link>
<pubDate>Thu, 25 Jan 2007 17:42:31 +0000</pubDate>
<dc:creator><![CDATA[rando]]></dc:creator>

		<category><![CDATA[Rails]]></category>

		<category domain="category" nicename="rails"><![CDATA[Rails]]></category>

		<category><![CDATA[Ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[Ruby]]></category>

		<category domain="tag"><![CDATA[Rails]]></category>

		<category domain="tag" nicename="rails"><![CDATA[Rails]]></category>

		<category domain="tag"><![CDATA[Ruby]]></category>

		<category domain="tag" nicename="ruby"><![CDATA[Ruby]]></category>

<guid isPermaLink="false">http://www.theamazingrando.com/blog/2007/01/25/rails-update_attribute-gotcha/</guid>
<description></description>
<content:encoded><![CDATA[Model#update_attribute(:name, "Rando") does not trigger any validations, <em>even on name</em> and just saves it to the database.

Model#update_attribute<strong>s</strong>(:name => "Rando") does run all validations, and returns false if they fail.

<a href="http://caboo.se/doc/classes/ActiveRecord/Base.html#M005871">Rails docs</a>]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>3</wp:post_id>
<wp:post_date>2007-01-25 13:42:31</wp:post_date>
<wp:post_date_gmt>2007-01-25 17:42:31</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>rails-update_attribute-gotcha</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:comment>
<wp:comment_id>2</wp:comment_id>
<wp:comment_author><![CDATA[Rando]]></wp:comment_author>
<wp:comment_author_email>psadauskas@hotmail.com</wp:comment_author_email>
<wp:comment_author_url>http://theamazingrando.com</wp:comment_author_url>
<wp:comment_author_IP>67.172.157.226</wp:comment_author_IP>
<wp:comment_date>2007-04-21 14:55:43</wp:comment_date>
<wp:comment_date_gmt>2007-04-21 18:55:43</wp:comment_date_gmt>
<wp:comment_content><![CDATA[And, of course, there's a whole rails-core discussion about this very topic:

http://groups.google.com/group/rubyonrails-core/browse_thread/thread/e9e9763e96af7175?hl=en]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>Show for output</title>
<link>http://www.theamazingrando.com/blog/?attachment_id=6</link>
<pubDate>Mon, 23 Apr 2007 00:11:21 +0000</pubDate>
<dc:creator><![CDATA[Paul Sadauskas]]></dc:creator>

		<category><![CDATA[Ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[Ruby]]></category>

<guid isPermaLink="false">http://www.theamazingrando.com/blog/wp-content/uploads/2007/04/show_for.png</guid>
<description></description>
<content:encoded><![CDATA[Output of the show for helper as rendered by Firefox]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>6</wp:post_id>
<wp:post_date>2007-04-22 20:11:21</wp:post_date>
<wp:post_date_gmt>2007-04-23 00:11:21</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>show-for-output</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:attachment_url>http://www.theamazingrando.com/blog/wp-content/uploads/2007/04/show_for.png</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/home/.nenni/psadauskas/theamazingrando.com/blog/wp-content/uploads/2007/04/show_for.png</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:5:{s:5:"width";i:557;s:6:"height";i:165;s:14:"hwstring_small";s:23:"height='37' width='128'";s:4:"file";s:88:"/home/.nenni/psadauskas/theamazingrando.com/blog/wp-content/uploads/2007/04/show_for.png";s:5:"thumb";s:22:"show_for.thumbnail.png";}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Rails tip: Additional content for a layout</title>
<link>http://www.theamazingrando.com/blog/?p=7</link>
<pubDate>Mon, 22 Oct 2007 17:39:45 +0000</pubDate>
<dc:creator><![CDATA[Paul Sadauskas]]></dc:creator>

		<category><![CDATA[Rails]]></category>

		<category domain="category" nicename="rails"><![CDATA[Rails]]></category>

		<category><![CDATA[Ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[Ruby]]></category>

		<category domain="tag"><![CDATA[Rails]]></category>

		<category domain="tag" nicename="rails"><![CDATA[Rails]]></category>

		<category domain="tag"><![CDATA[Ruby]]></category>

		<category domain="tag" nicename="ruby"><![CDATA[Ruby]]></category>

<guid isPermaLink="false">http://www.theamazingrando.com/blog/2007/10/22/rails-tip-additional-content-for-a-layout/</guid>
<description></description>
<content:encoded><![CDATA[If you need to add additional content to your layout, you can have named content_for blocks. Great for including additional page-specific javascript files.

In application.erb:
<pre LANG="rails">
<!-- snip -->
<%= javascript_include_tag :defaults %>
<%= yield :javascript %>
<!-- snip --></pre>
Then inside your view, you can:
<pre LANG="rails">
<% content_for :javacript do %>
  <%= javascript_include_tag 'view-specific.js' %>
<% end %></pre>]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>7</wp:post_id>
<wp:post_date>2007-10-22 11:39:45</wp:post_date>
<wp:post_date_gmt>2007-10-22 17:39:45</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>rails-tip-additional-content-for-a-layout</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>Comcast &amp; Bittorrent</title>
<link>http://www.theamazingrando.com/blog/?p=8</link>
<pubDate>Sat, 27 Oct 2007 03:06:31 +0000</pubDate>
<dc:creator><![CDATA[Paul Sadauskas]]></dc:creator>

		<category><![CDATA[Linux]]></category>

		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>

		<category domain="tag"><![CDATA[Linux]]></category>

		<category domain="tag" nicename="linux"><![CDATA[Linux]]></category>

<guid isPermaLink="false">http://www.theamazingrando.com/blog/2007/10/26/comcast-bittorrent/</guid>
<description></description>
<content:encoded><![CDATA[Comcast user? Bummed that they're ruining your bittorrent? No problem. They way the kill your connection is by sending unsolicited TCP reset packets to your bittorrent client, making it think that the person you're downloading from has closed the connection. If you're using a good firewall/router, you can write a rule that will block it. I'm using <a href="http://www.polarcloud.com/tomato">Tomato</a> firmware for my Linksys WRT54G, and added the following line to my firewall scripts:
<code>
iptables -A {wan interface} -p tcp --dport {bittorrent port} --tcp-flags RST RST -j DROP
</code>
This drops all incoming RST packets to your bittorrent client. Now, this even removes the legitimate ones, if your source really does disconnect, you won't know about it. Luckily, the connection will timeout after about 10 minutes anyways, so its not that bad. I've been using this for a couple weeks now, and my bittorrent transfer speeds are back to what they were before Comcast started doing all this.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>8</wp:post_id>
<wp:post_date>2007-10-26 21:06:31</wp:post_date>
<wp:post_date_gmt>2007-10-27 03:06:31</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>comcast-bittorrent</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1211399160</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>2</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Ruby rescues are not slow</title>
<link>http://www.theamazingrando.com/blog/?p=9</link>
<pubDate>Mon, 26 Nov 2007 22:21:38 +0000</pubDate>
<dc:creator><![CDATA[Paul Sadauskas]]></dc:creator>

		<category><![CDATA[Ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[Ruby]]></category>

		<category domain="tag"><![CDATA[Ruby]]></category>

		<category domain="tag" nicename="ruby"><![CDATA[Ruby]]></category>

<guid isPermaLink="false">http://www.theamazingrando.com/blog/2007/11/26/ruby-rescues-are-not-slow/</guid>
<description></description>
<content:encoded><![CDATA[I've heard several times that you should avoid exceptions because they are slow. They are in Java, so I think that has given them a bad name everywhere. The only real numbers I could find are from <a href="http://www.notsostupid.com/blog/2006/08/31/the-price-of-a-rescue/" title="http://www.notsostupid.com/blog/2006/08/31/the-price-of-a-rescue/">http://www.notsostupid.com/blog/2006/08/31/the-price-of-a-rescue/</a> . His 'plain' test is also missing the conditional that would also have to be executed (In this case, to make sure 5 is not 0). His post is also 18 months old, so I updated the 'plain' test and re-ran it (Upping the runs to 5,000,000). My plain test now looks like:
<pre lang="ruby">
x.report("plain") do
  for i in 1..n
    if 5.0 != 0.0
      1.0/5.0
    end
  end
end</pre>
And my results:
<pre>
% ruby --version
ruby 1.8.6 (2007-09-24 patchlevel 111) [x86_64-linux]
% ruby test_rescue.rb
user     system      total        real
plain    4.020000   0.010000   4.030000 (  4.034352)
safe     3.230000   0.010000   3.240000 (  3.238219)
rescue   3.270000   0.010000   3.280000 (  3.289843)</pre>
So it would seem, from my completely unscientific testing, that the rescue is actually <em>faster</em> than bounds-checking.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>9</wp:post_id>
<wp:post_date>2007-11-26 16:21:38</wp:post_date>
<wp:post_date_gmt>2007-11-26 22:21:38</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>ruby-rescues-are-not-slow</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:comment>
<wp:comment_id>393</wp:comment_id>
<wp:comment_author><![CDATA[Sam Smoot]]></wp:comment_author>
<wp:comment_author_email>ssmoot@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://datamapper.org</wp:comment_author_url>
<wp:comment_author_IP>64.143.116.213</wp:comment_author_IP>
<wp:comment_date>2008-03-19 10:56:27</wp:comment_date>
<wp:comment_date_gmt>2008-03-19 17:56:27</wp:comment_date_gmt>
<wp:comment_content><![CDATA[They're actually over 100x slower. His benchmark was flawed and didn't actually raise any exceptions.

/me rains on parades. :)]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>Idealized Migration DSL</title>
<link>http://www.theamazingrando.com/blog/?p=11</link>
<pubDate>Mon, 07 Jan 2008 18:12:47 +0000</pubDate>
<dc:creator><![CDATA[Paul Sadauskas]]></dc:creator>

		<category><![CDATA[Datamapper]]></category>

		<category domain="category" nicename="datamapper"><![CDATA[Datamapper]]></category>

		<category><![CDATA[Ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[Ruby]]></category>

		<category domain="tag"><![CDATA[Datamapper]]></category>

		<category domain="tag" nicename="datamapper"><![CDATA[Datamapper]]></category>

		<category domain="tag"><![CDATA[Migrations]]></category>

		<category domain="tag" nicename="migrations"><![CDATA[Migrations]]></category>

		<category domain="tag"><![CDATA[Ruby]]></category>

		<category domain="tag" nicename="ruby"><![CDATA[Ruby]]></category>

<guid isPermaLink="false">http://www.theamazingrando.com/blog/index.php/2008/01/07/idealized-migration-dsl/</guid>
<description></description>
<content:encoded><![CDATA[There's a <a href="http://groups.google.com/group/datamapper/browse_thread/thread/1b24e6f3d7675add">discussion</a> in the datamapper group about how to do migrations. I've thrown together an idealized DSL for how the migrations themselves should look.

Here's the thinking about this, based on how our 2-man web dev team, plus occasionally a few other developers, work on them:

<ul>
<li>
We don't down-migrate in development. We just drop, create & re-migrate the database. In production, we also never have had to down migrate (yet).
</li>
<li>
Occasionally, two developers working in entirely different parts of the system will make a new migration. In default rails, this will create a numbering conflict, and its a pain for the dev that checked in last. Since the two migrations touched different tables, and sometimes even different databases, the versioning isn't helpful. There's plugins to help, using int timestamps, but they're annoying, too. Migrations should be tracked by name, and the system should be smart enough to run any that haven't been run. Versions should be allowed to overlap, with the understanding that overlapping version numbers will be run in any order
</li>
<li>
When using the helpers, like create_table, add_column, etc, the system should be able to figure out the down migration on its own.
</li>
<li>
More often then not, our migrations are written in raw SQL. The helpers are only good for the simplest cases, and we usually want something more complex.
</li>
<li>
These absolutely have to be able to support multiple databases with a minimum of headache.
</li>
</ul>

<h2>Example Migrations</h2>

<pre lang="ruby">
migration 1, :create_people_table do
  up do
    execute "CREATE TABLE people (id serial, name varchar)"
  end
  down do
    execute "DROP TABLE people"
  end
end

migration 2, :add_age_to_people do
  up do
    execute "ALTER TABLE people ADD COLUMN age int"
  end
  down do
    execute "ALTER TABLE people DROP COLUMN age"
  end
end
</pre>

]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>11</wp:post_id>
<wp:post_date>2008-01-07 12:12:47</wp:post_date>
<wp:post_date_gmt>2008-01-07 18:12:47</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>idealized-migration-dsl</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:comment>
<wp:comment_id>314</wp:comment_id>
<wp:comment_author><![CDATA[Dan Kubb]]></wp:comment_author>
<wp:comment_author_email>dan@kubb.name</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>207.194.143.166</wp:comment_author_IP>
<wp:comment_date>2008-01-26 23:14:44</wp:comment_date>
<wp:comment_date_gmt>2008-01-27 06:14:44</wp:comment_date_gmt>
<wp:comment_content><![CDATA[I use migrations similarly to how you do.

When doing a production migration I can't afford to give 100% trust in everything working out perfectly, so I always dump the database before migrating up.  The down action may sometimes be used to quickly redo migrations in developing, but that's about it, usually its quicker to just restore from a schema.

I was thinking that when the up action is about to alter a table it should dump the table to a file; and running the down action later should simply restore the table prior to the modification.

This should remove the need to write the down actions, since you'd never have to figure out the "compensating action" for each up action; since restoring the dump file would have the same outcome.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>1731</wp:comment_id>
<wp:comment_author><![CDATA[Cornell Galloway]]></wp:comment_author>
<wp:comment_author_email>seufhb@lphyj.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>94.102.60.153</wp:comment_author_IP>
<wp:comment_date>2008-11-12 13:59:35</wp:comment_date>
<wp:comment_date_gmt>2008-11-12 20:59:35</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>3xqdhulucfdq0u4s</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>DM Migrations (now with 100% more helpers!)</title>
<link>http://www.theamazingrando.com/blog/?p=13</link>
<pubDate>Mon, 11 Feb 2008 23:37:04 +0000</pubDate>
<dc:creator><![CDATA[Paul Sadauskas]]></dc:creator>

		<category><![CDATA[Datamapper]]></category>

		<category domain="category" nicename="datamapper"><![CDATA[Datamapper]]></category>

		<category><![CDATA[Ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[Ruby]]></category>

		<category domain="tag"><![CDATA[Datamapper]]></category>

		<category domain="tag" nicename="datamapper"><![CDATA[Datamapper]]></category>

		<category domain="tag"><![CDATA[Migrations]]></category>

		<category domain="tag" nicename="migrations"><![CDATA[Migrations]]></category>

		<category domain="tag"><![CDATA[Ruby]]></category>

		<category domain="tag" nicename="ruby"><![CDATA[Ruby]]></category>

<guid isPermaLink="false">http://www.theamazingrando.com/blog/index.php/2008/02/11/dm-migrations-now-with-100-more-helpers/</guid>
<description></description>
<content:encoded><![CDATA[Added some helpers to the DataMapper Migrations I've been writing. These helpers just build up some SQL, and feed it into #execute.

<pre lang="ruby">
migration 1, :create_people_table do
  up do
    create_table :people do 
      column :name,   :string
      column :gender, :string
    end
  end
  down do
    drop_table :people
  end
end

migration 2, :add_age_and_dob_to_people do
  up do
    modify_table :people do
      add_column :age, :integer
      add_column :dob, :datetime
    end
  end
  down do
    modify_table :people do
      drop_columns :age, :dob
    end
  end
end
</pre>

A caveat: The ALTER TABLE stuff in SQLite is pretty weak. To do anything other than rename the table, or add a column, you have to create a new table with the schema you want, copy the data, then drop the old table. Since these helpers just build the SQL, but don't execute it, I can't run any queries against the table at load time, because some previous migration may have altered the schema in between the load and execution of this one. You're better off just writing the SQL yourself in this case. This is only a factor in SQLite3, though, since Postgres & MySQL support the full ALTER TABLE stuff. In SQLite3, trying to call one of the broken helpers will result in a NotImplemented exception.




]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>13</wp:post_id>
<wp:post_date>2008-02-11 16:37:04</wp:post_date>
<wp:post_date_gmt>2008-02-11 23:37:04</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>dm-migrations-now-with-100-more-helpers</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:comment>
<wp:comment_id>315</wp:comment_id>
<wp:comment_author><![CDATA[Dan Kubb]]></wp:comment_author>
<wp:comment_author_email>dan@kubb.name</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>207.194.143.166</wp:comment_author_IP>
<wp:comment_date>2008-02-11 20:22:35</wp:comment_date>
<wp:comment_date_gmt>2008-02-12 03:22:35</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Once non-destructive auto_migrate makes it into DM, how common do you think it will be to use migration scripts to add tables/columns/indexes/associations?  I can't think of any reason to do add anything outside of what's specified in the models.

The main thing I can see migrations being used for (when this happens) is to do mass updates to the data, and for removal of tables, columns, indexes and associations.  

When I say mass updates to data, I'm talking about cases like where you add a first_name and last_name column to a model that previously had just name.  The migration would split the name into the first_name and last_name columns for every record, and then remove the name column.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>899</wp:comment_id>
<wp:comment_author><![CDATA[Sam]]></wp:comment_author>
<wp:comment_author_email>sam.saffron@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://www.samsaffron.com</wp:comment_author_url>
<wp:comment_author_IP>124.170.206.237</wp:comment_author_IP>
<wp:comment_date>2008-05-05 16:25:25</wp:comment_date>
<wp:comment_date_gmt>2008-05-05 23:25:25</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Rando, 

What are your thoughts on: 
http://www.samsaffron.com/archive/2008/04/07/Migration+Part+1+classic+migrations 
and 
http://www.samsaffron.com/archive/2008/04/09/On+migrations+-+Part+2+-+automatic+migrations 

Cheers
Sam]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>1066</wp:comment_id>
<wp:comment_author><![CDATA[rando]]></wp:comment_author>
<wp:comment_author_email>psadauskas@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://theamazingrando.com/blog</wp:comment_author_url>
<wp:comment_author_IP>67.173.255.144</wp:comment_author_IP>
<wp:comment_date>2008-05-21 09:46:35</wp:comment_date>
<wp:comment_date_gmt>2008-05-21 16:46:35</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Sorry, Sam, I didn't see this earlier. Your links seem to be broken now, but I'd love to check them out.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>2</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>1193</wp:comment_id>
<wp:comment_author><![CDATA[Sam Saffron]]></wp:comment_author>
<wp:comment_author_email>sam@samsaffron.com</wp:comment_author_email>
<wp:comment_author_url>http://www.samsaffron.com</wp:comment_author_url>
<wp:comment_author_IP>124.170.215.230</wp:comment_author_IP>
<wp:comment_date>2008-06-03 21:04:01</wp:comment_date>
<wp:comment_date_gmt>2008-06-04 04:04:01</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>Sorry about that, how about these links I think they should work</p>

<p>http://www.samsaffron.com/posts/25 
http://www.samsaffron.com/posts/27</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>Rails Logging to Syslog using Logging gem</title>
<link>http://www.theamazingrando.com/blog/?p=14</link>
<pubDate>Wed, 05 Mar 2008 18:42:27 +0000</pubDate>
<dc:creator><![CDATA[Paul Sadauskas]]></dc:creator>

		<category><![CDATA[Rails]]></category>

		<category domain="category" nicename="rails"><![CDATA[Rails]]></category>

		<category><![CDATA[Ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[Ruby]]></category>

		<category domain="tag"><![CDATA[Ruby]]></category>

		<category domain="tag" nicename="ruby"><![CDATA[Ruby]]></category>

<guid isPermaLink="false">http://www.theamazingrando.com/blog/index.php/2008/03/05/rails-logging-to-syslog-using-logging-gem/</guid>
<description></description>
<content:encoded><![CDATA[When using a mongrel cluster, you can either log to a separate file for each mongrel instance, or you can log them all to the same file, but on a loaded cluster, there's a good chance your logged lines will get interleaved and be unreadable. Luckily, there's another way. The new replacement for log4r <a href="http://logging.rubyforge.org">Logging</a> can take care of this. It has a built-in way of <a href="http://www.ruby-forum.com/topic/142485">not interleaving the lines</a>, but (I think) its using lockfiles to do so, and if so, that's going to be detrimental to performance. The best solution has been around for 25 years, syslog. And with one of the more recent syslog daemons (syslog-ng, or rsyslog), you can set it up to log your mongrel log wherever you like.

First, install the logging gem: <code>sudo gem install logging</code>

Then, in config/environments/production.rb:
<pre lang="ruby">
require 'logging'
config.logger = returning Logging::Logger['mongrel'] do |l|
  l.add_appenders( Logging::Appenders::Syslog.new('my_rails_app') )
  l.level = :info
end
</pre>

For more details, check out the <a href="http://logging.rubyforge.org">Logging</a> docs, but all I've done here is set the process name that it gets logged to as "my_rails_app", so change this to whatever your app name is.

Then, you can filter it in rsyslogd.conf:

<pre>
:msg, startswith, " my_rails_app" /var/log/rails/production.log
</pre>

And you're done!]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>14</wp:post_id>
<wp:post_date>2008-03-05 11:42:27</wp:post_date>
<wp:post_date_gmt>2008-03-05 18:42:27</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>rails-logging-to-syslog-using-logging-gem</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>Birthday!</title>
<link>http://www.theamazingrando.com/blog/?p=15</link>
<pubDate>Mon, 10 Mar 2008 16:33:24 +0000</pubDate>
<dc:creator><![CDATA[Paul Sadauskas]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<category domain="tag"><![CDATA[Personal]]></category>

		<category domain="tag" nicename="personal"><![CDATA[Personal]]></category>

<guid isPermaLink="false">http://www.theamazingrando.com/blog/index.php/2008/03/10/birthday/</guid>
<description></description>
<content:encoded><![CDATA[    paul = Person.get(:name => "Paul")
    paul.age += 1
    paul.save!
]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>15</wp:post_id>
<wp:post_date>2008-03-10 09:33:24</wp:post_date>
<wp:post_date_gmt>2008-03-10 16:33:24</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>birthday</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1222186657</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>2</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>394</wp:comment_id>
<wp:comment_author><![CDATA[Sam Smoot]]></wp:comment_author>
<wp:comment_author_email>ssmoot@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://datamapper.org</wp:comment_author_url>
<wp:comment_author_IP>64.143.116.213</wp:comment_author_IP>
<wp:comment_date>2008-03-19 10:57:03</wp:comment_date>
<wp:comment_date_gmt>2008-03-19 17:57:03</wp:comment_date_gmt>
<wp:comment_content><![CDATA[What? No DataMapper? For shame! :-D

Happy belated birthday!]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>MWRC</title>
<link>http://www.theamazingrando.com/blog/?p=16</link>
<pubDate>Thu, 27 Mar 2008 23:24:31 +0000</pubDate>
<dc:creator><![CDATA[Paul Sadauskas]]></dc:creator>

		<category><![CDATA[Datamapper]]></category>

		<category domain="category" nicename="datamapper"><![CDATA[Datamapper]]></category>

		<category domain="tag"><![CDATA[Ruby]]></category>

		<category domain="tag" nicename="ruby"><![CDATA[Ruby]]></category>

<guid isPermaLink="false">http://www.theamazingrando.com/blog/index.php/2008/03/27/mwrc/</guid>
<description></description>
<content:encoded><![CDATA[Well, I'm off to <a href="http://mtnwestrubyconf.org/">Mountain West Ruby Conf</a>. If any of you Datamapper freaks are going, leave a comment, or email/jabber me at psadauskas@gmail.com. Maybe we can meet up for a beer.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>16</wp:post_id>
<wp:post_date>2008-03-27 16:24:31</wp:post_date>
<wp:post_date_gmt>2008-03-27 23:24:31</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>mwrc</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>MySQL Enterprise</title>
<link>http://www.theamazingrando.com/blog/?p=18</link>
<pubDate>Tue, 15 Apr 2008 16:55:46 +0000</pubDate>
<dc:creator><![CDATA[Paul Sadauskas]]></dc:creator>

		<category><![CDATA[Linux]]></category>

		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>

		<category domain="tag"><![CDATA[MySQL]]></category>

		<category domain="tag" nicename="mysql"><![CDATA[MySQL]]></category>

		<category domain="tag"><![CDATA[Open Source]]></category>

		<category domain="tag" nicename="open-source"><![CDATA[Open Source]]></category>

		<category domain="tag"><![CDATA[Postgres]]></category>

		<category domain="tag" nicename="postgres"><![CDATA[Postgres]]></category>

<guid isPermaLink="false">http://www.theamazingrando.com/blog/index.php/2008/04/15/mysql-enterprise/</guid>
<description></description>
<content:encoded><![CDATA[I just came across this link <a href="http://jcole.us/blog/archives/2008/04/14/just-announced-mysql-to-launch-new-features-only-in-mysql-enterprise/">about some new MySQL features will be for Enterprise customers only</a>. The feature they mention here is online backups. I think I'm just going to stop using MySQL for any new projects.

I started using MySQL several years ago, near the end of the 3.x series. MySQL at that time was the easiest to get running, and at that point in my career, I wasn't too interested in SQL-compliance. I started playing around with postgres, but didn't use it for anything major. I found a lot of its concepts confusing, as my only real db experience was with MySQL (and Access, I'm ashamed to admit). 

About 2 years ago I started working for my current employer. They used Postgres, so I bucked down and started learning it. I was impressed with what I saw, but still preferred MySQL. After I was there for a few months, we needed to develop a project that had 10,000s for INSERTs and DELETEs an hour. Testing showed that Postgres spent 50% of its time auto- or manual vacuuming. I switched the dbms over to MySQL using MyISAM tables (we didn't need transactions or anything fancy for this). It was a huge speed improvement, and we've been running both MySQL and Postgres to this day.

Its coming time to rewrite the project, to account for some changes to our design. I've been playing around, and the new auto vacuuming stuff in Postgres 8.3 is pretty good. I was going to do some further benchmarking to see if we should consider switching back to just Postgres, but after reading the post I linked above, I'm not going to even bother. Postgres is fast enough these days, its within a few percentage points of MySQL at most common things, and its much more standards compliant. Hopefully Sun will see the light, and realize that continuing down this path will destroy MySQL and the community. Free software developers (including myself) are a fickle bunch, and can jump ship or fork a project with startling speed.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>18</wp:post_id>
<wp:post_date>2008-04-15 09:55:46</wp:post_date>
<wp:post_date_gmt>2008-04-15 16:55:46</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>mysql-enterprise</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1211398625</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>2</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>I might as well get in on it, too</title>
<link>http://www.theamazingrando.com/blog/?p=19</link>
<pubDate>Tue, 15 Apr 2008 22:25:24 +0000</pubDate>
<dc:creator><![CDATA[Paul Sadauskas]]></dc:creator>

		<category><![CDATA[Linux]]></category>

		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>

		<category domain="tag"><![CDATA[Linux]]></category>

		<category domain="tag" nicename="linux"><![CDATA[Linux]]></category>

		<category domain="tag"><![CDATA[zsh]]></category>

		<category domain="tag" nicename="zsh"><![CDATA[zsh]]></category>

<guid isPermaLink="false">http://www.theamazingrando.com/blog/?p=19</guid>
<description></description>
<content:encoded><![CDATA[Modified for zshell:

<pre lang=bash>
paul@rando64 ~ % cat .zsh_history | awk -F \; '{print $2}' | awk '{a[$1]++}END{for(i in a){print a[i] " " i}}' | sort -rn | head
1435 cd
1057 git
1048 ls
950 vim
438 ruby
405 sudo
323 spec
272 emerge
265 rake
211 make

paul@rando64 ~ % wc -l .zsh_history
10027 .zsh_history

</pre>]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>19</wp:post_id>
<wp:post_date>2008-04-15 15:25:24</wp:post_date>
<wp:post_date_gmt>2008-04-15 22:25:24</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>i-might-as-well-get-in-on-it-too</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>2</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1211399185</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Moving on from Gentoo...</title>
<link>http://www.theamazingrando.com/blog/?p=20</link>
<pubDate>Wed, 21 May 2008 19:34:34 +0000</pubDate>
<dc:creator><![CDATA[Paul Sadauskas]]></dc:creator>

		<category><![CDATA[Linux]]></category>

		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>

		<category domain="tag"><![CDATA[Arch]]></category>

		<category domain="tag" nicename="arch"><![CDATA[Arch]]></category>

		<category domain="tag"><![CDATA[gentoo]]></category>

		<category domain="tag" nicename="gentoo"><![CDATA[gentoo]]></category>

		<category domain="tag"><![CDATA[Linux]]></category>

		<category domain="tag" nicename="linux"><![CDATA[Linux]]></category>

		<category domain="tag"><![CDATA[Ubuntu]]></category>

		<category domain="tag" nicename="ubuntu"><![CDATA[Ubuntu]]></category>

<guid isPermaLink="false">http://www.theamazingrando.com/blog/?p=20</guid>
<description></description>
<content:encoded><![CDATA[<strong>Updated:</strong> I added a few more paragraphs that I had originally commented on in response to Mr. Berkholz's comment.

I recently saw the announcement of the 'fork' of Gentoo, <a href="http://exherbo.org/">Exherbo</a>. Its not really a fork, because there isn't any shared stuff. The package manager used is Paludis, one of the alternatives to Portage in Gentoo. Several of the developers on Exherbo are from Gentoo, and they profess similar goals. I'm a bit wary, though, because their webpage is pretty dickish. Thats fine, Gentoo never claimed to be a everyman's distro, but I kind of wish they'd waited to announce their project until <em>after</em> they wanted people to start using it.

I shouldn't be surprised, though, since Gentoo dev and author of Paludis, Ciaran McCreesh, is one of the Exherbo devs. I once tried to use Paludis about a year ago, when portage was in one of its broken states ( one of the reasons I'm moving on, more on that later...) I read the install page for Paludis, got it installed, but couldn't get it working. I fiddled with it for awhile, read some conflicting documentation on the Paludis website, and finally hopped on the IRC channel to ask for help. I was informed that the documentation was out of date, and when I asked what I needed to do, showing them my error messages and everything, I was told by Mr. McCreesh to just wait a few weeks. That's a crazy way to treat your users and potential contributors. Maybe I'm just used to the Ruby community, where everyone is helpful and supportive.

I've been an idle user of Ubuntu for awhile, its great for my older laptop so I don't have to spend 5 days compiling X, and all the ACPI and wireless just work without me having to spend an afternoon reading documentation on the gentoo wiki or forums. It installs an awful lot of crap I don't want, like PAM and games, but that's an acceptable trade-off to me, for a completely usable desktop system. I can't stand it for development work, though. All the packages are crazily-named, and you have to install an extra 500MB of stuff to be able to compile anything of your own. And the header files for all the packages are named differently, so you have to search or remember if its -dev, -devel, lib{pkg}-dev, and so on. Gentoo was great, because if you installed a package, you got the header files you needed to develop against it, too. When I got my new laptop, I just skipped even trying Gentoo, and stuck with the Dell Ubuntu that came with it, then a few weeks later replaced it with Ubuntu 8.04.

I've tinkered with several other distros for awhile, Slack, Suse, Fedora, but nothing met my development needs as well as Gentoo. Then I saw a post on <a href="http://www.zedshaw.com/blog/index.html">Zed Shaw's blog</a> (that I can't seem to find right now) and he mentioned that he used <a href="http://www.archlinux.org/">Arch Linux</a> for development. I'd played with Arch some, its actually being used on my <a href="http://www.slicehost.com/">Slice</a> that I'm hosting this blog from. It seemed nice as a server OS, extremely lightweight (after install, you get not much more than bash and vi, just like Gentoo). After reading Zed's post, though, I decided to give it a shot (I had just melted down my Gentoo machine because portage was broken. Again.)

It's great. Barebones, extremely configurable, you install only the stuff you want, everything gets installed where I want it, with sane package names, in sane locations. The core repository is rock solid, and the user-submitted package repository (AUR) is well-supported. In the 2 months I've been running it, no upgrade has broken my system. Unlike Ubuntu and like Gentoo, Arch doesn't have distro releases, they just put out an updated live CD every few months. The packages themselves stay pretty close to the lastest release from upstream. You don't have to wait for a new version of the distro to upgrade to the lastest xorg or kernel version. Overall, its been extremely stable, and the problems I have had received attention from the developers really quickly, and they were extremely helpful.

I think that until Gentoo manages to get its act back together, and be the awesome distro it was for the first few years of its existence, I'm going to stick with Arch for development, and Ubuntu for my laptop. I'm still stuck with Centos for server installs at work, they're afraid if we tell clients we're not running some name-brand linux, they won't buy our product. I tried explaining that if a client cares what OS we run we probably don't want to sell to them anyways. But as far as rpm-based distros go, Centos isn't <em>too</em> bad.

My issues with Gentoo are all the breakage, even in non-keyworded packages. If you don’t stay on top of it, and emerge -avu world every week or two, you’re just about guaranteed to spend an afternoon getting everything working again. If you wait more than a month, as a coworker of mine does, you have to spend a whole day getting it to the point where you can upgrade even a single package, because of all the dependencies. I have a server at home that I first installed about two years ago, and haven’t upgraded since. I’m probably better of at this point to just reinstall it.

Not to mention the countless time (at least once a month), where I do my daily emerge world and it fails, and I have to track down on the forums for the answer, if there is even one. Most of the times it can be solved by emerge --sync, but the fact that a package even slipped past QA long enough to make it into stable is appalling.

I love to tweak, and Gentoo still is awesome for that. But Arch is just as good, and the packages are just as fresh, or more so (Where’s postgres 8.3 in Gentoo? It’s been out for 6 months now, and I still have to use an overlay that’s broken more often than not? Is was the same story with upgrading to 8.2, and I thought the plan was to get it slotted to fix all these problems.)

Probably the biggest problem of all is the detachment of the Gentoo leaders from the users. This has been blogged about elsewhere, probably most famously by Daniel Robbins himself. The devs lead the show, which is how it has always been, but over the last few years they’ve been working more on pet projects, rather than making things better for the users. When’s the last time we had a livecd? The Gentoo forums used to be a great resource, but in the same time span, the atmosphere has changed for the worse. There’s fewer people interested in helping out and answering questions these days. The Arch forums remind me of the Gentoo forums of old, its nice being able to find answers to your questions, without having to sift through the rude responses. Maybe it has gotten better, I haven’t visited the forum in several months.

I guess my biggest gripe is the community. The focus has changed away from the users, which is the whole reason Gentoo is in existence. I see on your blog that you’re now a member of the council, maybe you can help make the changes that need to be made.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>20</wp:post_id>
<wp:post_date>2008-05-21 12:34:34</wp:post_date>
<wp:post_date_gmt>2008-05-21 19:34:34</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>moving-on-from-gentoo</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1211472700</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>2</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>1069</wp:comment_id>
<wp:comment_author><![CDATA[Donnie Berkholz]]></wp:comment_author>
<wp:comment_author_email>dberkholz@gentoo.org</wp:comment_author_email>
<wp:comment_author_url>http://dberkholz.wordpress.com</wp:comment_author_url>
<wp:comment_author_IP>128.193.220.51</wp:comment_author_IP>
<wp:comment_date>2008-05-21 17:02:37</wp:comment_date>
<wp:comment_date_gmt>2008-05-22 00:02:37</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>Sorry to hear you've stopped using Gentoo. You talk about Gentoo getting its act together and being awesome again -- what exactly do you think we should do for you to change your mind about Gentoo? Most of the problems you talked about in this post have to do with Paludis, which I wouldn't say is a problem with Gentoo.</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>1072</wp:comment_id>
<wp:comment_author><![CDATA[Paul Sadauskas]]></wp:comment_author>
<wp:comment_author_email>psadauskas@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://theamazingrando.com/blog</wp:comment_author_url>
<wp:comment_author_IP>67.173.255.144</wp:comment_author_IP>
<wp:comment_date>2008-05-21 22:30:51</wp:comment_date>
<wp:comment_date_gmt>2008-05-22 05:30:51</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>I have no real issues with Paludis, because I was soured of the experience early on, and never used it.</p>

<p>I moved everything else from this comment to the main blog post, because its relevant, and the original post felt unfinished without it.</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>2</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>Spec'ing Migrations (A Tutorial)</title>
<link>http://www.theamazingrando.com/blog/?p=21</link>
<pubDate>Thu, 22 May 2008 20:30:59 +0000</pubDate>
<dc:creator><![CDATA[Paul Sadauskas]]></dc:creator>

		<category><![CDATA[Datamapper]]></category>

		<category domain="category" nicename="datamapper"><![CDATA[Datamapper]]></category>

		<category><![CDATA[Ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[Ruby]]></category>

		<category domain="tag"><![CDATA[Datamapper]]></category>

		<category domain="tag" nicename="datamapper"><![CDATA[Datamapper]]></category>

		<category domain="tag"><![CDATA[Migrations]]></category>

		<category domain="tag" nicename="migrations"><![CDATA[Migrations]]></category>

		<category domain="tag"><![CDATA[rspec]]></category>

		<category domain="tag" nicename="rspec"><![CDATA[rspec]]></category>

		<category domain="tag"><![CDATA[Ruby]]></category>

		<category domain="tag" nicename="ruby"><![CDATA[Ruby]]></category>

<guid isPermaLink="false">http://www.theamazingrando.com/blog/?p=21</guid>
<description></description>
<content:encoded><![CDATA[I realized I haven't blogged about (IMHO) the neatest feature of DataMapper's migrations yet. One of the more harrowing experiences for me in Rails is upgrading a production server with live data, and hoping your migration handles all the existing data correctly. You can dump the database, and attempt the migration on a clone, and hand-examine the data to make sure it was correct, but that feels very non-ruby-like to me. With the spec groups and matchers available in DataMapper migrations, though, you can spec your migrations and be certain that it will work correctly, and translate all your edge-case data correctly.

Lets start off with a simple example. We'll start backwards for this example, but in real life, you're probably better off writing the spec first, then the migration itself, as is normal in iterative development. But regardless, lets say we have the following simple migration we want to spec:

<pre lang="ruby">
migration 1, :create_people_table do
  up do
    create_table :people do
      column :id,     "integer"
      column :name,   "varchar(255)"
      column :age,    "integer"
    end
  end
end
</pre>

Note that I've used string as the column types here. I hope that one day migrations will support dm-types, but until those stabilize post-0.9, I'm not going to try to implement it. Anyways, this just creates a pretty typical `people` table.

Now lets start writing the spec:

<pre lang="ruby">
describe :create_people_table, :type => :migration do

  before do
    run_migration
  end

end
</pre>

Just some boilerplate here. You put the migration name as the name of the `describe` block, and pass the additional option of `:type => :migration`. This informs rspec to run the migration group-specific routines as part of this spec. After that, we have a before block. You must specify the `run_migration` at the end of this block. This allows you to insert any data you want _before_ the migration gets run, so that you can test it got migrated correctly. The way these work is that for every describe block, the database is dropped and recreated, then the migrations run _up_to_ the migration specified. Then the before block is executed, the migration is performed, then the examples are executed. There are some subtle differences between the various DO adapters as to how that all works, but the results are the same.

Alright, lets look at an example now:

<pre lang="ruby">
it 'should create a people table' do
  repository(:default).should have_table(:people)
end
</pre>

Pretty self explanatory, right? Here we use the `#have_table` matcher to check that we do, in fact, have a table called `people`.

How about a more complicated one?

<pre lang="ruby">
it 'should have an id column as the primary key' do
  table(:people).should have_column(:id)
  table(:people).column(:id).type.should == 'integer'
  #table(:people).column(:id).should be_primary_key
end
</pre>

Ah, some meat in this one. Pretty obvious what it does, too. First we check that the `people` table has a column called `id`. Then we look to see that the column's type is 'integer'. (I plan on writing better matchers for these. Right now you have to string-match the column type of your RDBMS. Someday, you will be able to do `column(:id).should have_type(:integer)` or `column(:id).type.should be_integer`. I haven't decided which I like better.) Finally, we check that the column is a primary key. (This matcher hasn't been written yet, either. Feel free to contribute patches to any of this.)

And that's really all there is to it. Take a look at the [sample migration spec]: http://github.com/sam/dm-more/tree/master/dm-migrations/examples/sample_migration_spec.rb to see the whole thing with more examples.

Some things to be aware of
------------------------------
* The matchers don't work at all for MySQL. If anyone wants to contribute, please feel free. Take a look at the postgres & sqlite files under lib/sql/ to see how it should work.
* I couldn't find a way to drop/create a database while inside a DO adapter connection. Rather than trying, I just drop/recreate the 'test' schema inside the database specified in the adapter.
* In Sqlite, I just delete the file, and let the adapter re-create it on its own.
* Postgres is the best-tested, and the most feature-complete. Everything in the examples works on both pg and sqlite. The spec can be initialized in run in mysql, but none of the matchers have been written yet.
]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>21</wp:post_id>
<wp:post_date>2008-05-22 13:30:59</wp:post_date>
<wp:post_date_gmt>2008-05-22 20:30:59</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>specing-migrations-a-tutorial</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1214284288</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>2</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>We're looking for a Ruby Developer</title>
<link>http://www.theamazingrando.com/blog/?p=22</link>
<pubDate>Fri, 23 May 2008 20:29:29 +0000</pubDate>
<dc:creator><![CDATA[Paul Sadauskas]]></dc:creator>

		<category><![CDATA[Ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[Ruby]]></category>

<guid isPermaLink="false">http://www.theamazingrando.com/blog/?p=22</guid>
<description></description>
<content:encoded><![CDATA[We're looking for another Ruby & Web developer at my company, [Absolute Performance](http://absolute-performance.com). Here's the job description. [Email me](mailto:psadauskas@gmail.com) and/or [my boss](mailto:ewc@absolute-performance.com) if you're interested, and want to work in beautiful Boulder, CO, at an awesome company.

Ruby and Web Developer
==================

Description
----------------

We are looking for a Ruby & Rails developer to work primarily on our flagship product, System Shepherd.

Responsibilities
--------------------

 * Create and maintain web management tools for our product
 * Work with a development team, and designers and managers, as needed
 * Modify and integrate existing open-source tools
 * Must be able to work on-site at our office in Boulder, CO

Requirements
-------------------

You must have experience with:

 * Ruby
 * Rails Deployment
 * ReST & Web Services
 * Linux
 * Git & Subversion
 * MySQL & PostgreSQL
 * Ajax & Javascript
 * HTML, CSS

Bonus points for experience with:
--------------------

 * Merb/Datamapper
 * Shell scripting 
 * System Administration (Apache, monit, xmpp)
 * Agile/Scrum development practices
 * Java/J2EE & Application Server deployment
 * C++ and modern coding standards/libraries (STL, Boost, etc)

Other requirements:
--------------

 * Ability to create, read and follow written specifications
 * Strong analytical and creative problem solving skills
 * Ability to work self-directed in a fast-paced environment with minimal supervision
 * Strong work ethic, reliable and detail-oriented
 * Excellent written and oral communication skills
 * Ability to multi-task, prioritize work and meet deadlines
 * Flexibility and a desire to take on responsibilities
 * Ability to work in a team environment]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>22</wp:post_id>
<wp:post_date>2008-05-23 13:29:29</wp:post_date>
<wp:post_date_gmt>2008-05-23 20:29:29</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>were-looking-for-a-ruby-developer</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1211574569</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>2</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Announcing Resourceful</title>
<link>http://www.theamazingrando.com/blog/?p=23</link>
<pubDate>Mon, 30 Jun 2008 16:14:59 +0000</pubDate>
<dc:creator><![CDATA[Paul Sadauskas]]></dc:creator>

		<category><![CDATA[Resourceful]]></category>

		<category domain="category" nicename="resourceful"><![CDATA[Resourceful]]></category>

		<category><![CDATA[Ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[Ruby]]></category>

		<category domain="tag"><![CDATA[Resourceful]]></category>

		<category domain="tag" nicename="resourceful"><![CDATA[Resourceful]]></category>

		<category domain="tag"><![CDATA[Ruby]]></category>

		<category domain="tag" nicename="ruby"><![CDATA[Ruby]]></category>

<guid isPermaLink="false">http://www.theamazingrando.com/blog/?p=23</guid>
<description></description>
<content:encoded><![CDATA[<a href="http://resourceful.rubyforge.org/">Resourceful</a> is an advanced http library for Ruby that does all the fancy stuff that makes HTTP an amazing protocol. I'm pleased to announce the <a href="http://github.com/paul/resourceful/commits/rel_0.2">initial release</a> of Resourceful, 0.2. It already has some pretty cool features, with more to come. 

This library is intended to make it easier for you to write your next whiz-bang Web2.0 app by performing the next level of HTTP features for you. There's some pretty nice stuff in the HTTP1.1 spec, but so far (at least in Ruby), everyone has has to roll their own. There has been some amazing stuff done on the server side of the HTTP spec in ruby, like mongrel, thin and rack, but the client side has been stuck with Net::HTTP for too long. We hope to remedy that.

Basic Example
-------------

Here's how you perform a very simple HTTP GET request:
<pre lang="ruby">
require 'resourceful'
http = Resourceful::HttpAccessor.new
resp = http.resource('http://rubyforge.org').get
puts resp.body
</pre>

Yeah, yeah, big deal, right? Every Yet-Another HTTP Library can do that. What makes Resourceful different is the additional features we added on.

Features that should make you want to use it
--------------------------------------------
I plan to write some full-length articles about these features in the future, to show how we're using them. For now, a brief description will have to suffice: 

  * Redirection callbacks - GET requests automatically follow redirects, PUT, POST and DELETE do not. All allow callbacks to be set, that get called upon redirection. Should the callback return false, the redirection will not be followed. This will allow you to, for example, notify a local storage mechanism to update any links you might be storing with the new location.

  * Pluggable Authentication modules - Basic is built in, as is a very simple Digest one (but it's probably too simple to be really useful at this point. However, its very easy to roll your own, it only has to provide a couple of methods, and be registered with the @accessor.

  * Support for HTTP Caching - Most of the important parts of HTTP Caching, like storage, expiration, and validation are all handled for you. This is a simple in-memory store for the cached documents, but this is easily extensible. Some possible caching backends are a database, disk store, or memcached.

<strong>Update</strong>: My cohort on this also made a <a href="http://pezra.barelyenough.org/blog/2008/06/announcing-resourceful/">blog post</a> about Resourceful.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>23</wp:post_id>
<wp:post_date>2008-06-30 09:14:59</wp:post_date>
<wp:post_date_gmt>2008-06-30 16:14:59</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>announcing-resourceful</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1217519499</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>2</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>1385</wp:comment_id>
<wp:comment_author><![CDATA[Will Prater]]></wp:comment_author>
<wp:comment_author_email>will@mercurycloud.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>74.94.79.145</wp:comment_author_IP>
<wp:comment_date>2008-07-02 10:04:10</wp:comment_date>
<wp:comment_date_gmt>2008-07-02 17:04:10</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>Im trying to explicitly set the Host header.</p>

<p>I found this:
http://github.com/paul/resourceful/commit/ee920cca2a7a177d612544849561ef13837a1aaa</p>

<p>Which should work, but is not in the release branch.</p>

<p>Is there another way to set headers?  Specifically we need to have a URI with an IP address and set the Host header with the request.  Thanks!</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>1386</wp:comment_id>
<wp:comment_author><![CDATA[Will Prater]]></wp:comment_author>
<wp:comment_author_email>will@mercurycloud.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>74.94.79.145</wp:comment_author_IP>
<wp:comment_date>2008-07-02 10:09:36</wp:comment_date>
<wp:comment_date_gmt>2008-07-02 17:09:36</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>Looks like Request can return the response.  Nevermind.</p>

<p>Thanks for the library.</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>1388</wp:comment_id>
<wp:comment_author><![CDATA[Paul Sadauskas]]></wp:comment_author>
<wp:comment_author_email>psadauskas@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://theamazingrando.com/blog</wp:comment_author_url>
<wp:comment_author_IP>69.15.81.122</wp:comment_author_IP>
<wp:comment_date>2008-07-02 11:44:09</wp:comment_date>
<wp:comment_date_gmt>2008-07-02 18:44:09</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>That commit you referenced is from a older version, we have since pretty much rewritten the whole project from scratch.</p>

<p>Come to think of it, the #get method doesn't have the ability to set headers. POST, etc, do because of the need to set content-type, but it seems it was an oversight. I'll add that ability this afternoon.</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>2</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>Resourceful 0.2.1</title>
<link>http://www.theamazingrando.com/blog/?p=24</link>
<pubDate>Thu, 31 Jul 2008 15:53:36 +0000</pubDate>
<dc:creator><![CDATA[Paul Sadauskas]]></dc:creator>

		<category><![CDATA[Resourceful]]></category>

		<category domain="category" nicename="resourceful"><![CDATA[Resourceful]]></category>

		<category><![CDATA[Ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[Ruby]]></category>

		<category domain="tag"><![CDATA[HTTP]]></category>

		<category domain="tag" nicename="http"><![CDATA[HTTP]]></category>

		<category domain="tag"><![CDATA[Open Source]]></category>

		<category domain="tag" nicename="open-source"><![CDATA[Open Source]]></category>

		<category domain="tag"><![CDATA[Resourceful]]></category>

		<category domain="tag" nicename="resourceful"><![CDATA[Resourceful]]></category>

		<category domain="tag"><![CDATA[ReST]]></category>

		<category domain="tag" nicename="rest"><![CDATA[ReST]]></category>

		<category domain="tag"><![CDATA[Ruby]]></category>

		<category domain="tag" nicename="ruby"><![CDATA[Ruby]]></category>

<guid isPermaLink="false">http://www.theamazingrando.com/blog/?p=24</guid>
<description></description>
<content:encoded><![CDATA[I'm pleased to introduce the next release of Resourceful, 0.2.1. This one has tons of bugfixes over 0.2, and is actually being used in production. There's only one real new feature to speak of is prettier logging output. It shows the runtime for requests, the resulting status code, and if it was retrieved from the cache. Some sample log output:

<pre>
    GET [http://core.ssbe.localhost/service_descriptors]
    -> Returned 200 in 0.0146s
    GET [http://core.ssbe.localhost/service_descriptors]
      Retrieved from cache
    -> Returned 200 in 0.0003s
</pre>

The code to do that is simple, as always:

<pre lang="ruby">
require 'rubygems'
require 'resourceful'

http = Resourceful::HttpAccessor.new(:logger => Resourceful::StdOutLogger.new,
                                     :cache_manager => Resourceful::InMemoryCacheManager.new)


res = http.resource("http://core.ssbe.localhost/service_desciptors")
mime_type = 'application/json'

res.get(:accept => mime_type)
res.get(:accept => mime_type)
</pre>

I've seen the release of a couple other Rest-HTTP libraries since I started working on Resourceful, [HTTParty][] and [rest-client][]. They're worth checking out, but they lack some of the more powerful features of Resourceful, such as the free HTTP Caching demonstrated above.

As always [bug reports][res-lh] and [patches][res-src] are appreciated.


[HTTParty]: http://railstips.org/2008/7/29/it-s-an-httparty-and-everyone-is-invited
[rest-client]: http://github.com/adamwiggins/rest-client/tree/master

[res-lh]: http://resourceful.lighthouseapp.com/projects/11479-resourceful/
[res-src]: http://github.com/paul/resourceful/tree/master
    
]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>24</wp:post_id>
<wp:post_date>2008-07-31 08:53:36</wp:post_date>
<wp:post_date_gmt>2008-07-31 15:53:36</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>resourceful-021</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1217541977</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>2</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Resourceful - Adding default options</title>
<link>http://www.theamazingrando.com/blog/?p=25</link>
<pubDate>Thu, 31 Jul 2008 20:56:20 +0000</pubDate>
<dc:creator><![CDATA[Paul Sadauskas]]></dc:creator>

		<category><![CDATA[Resourceful]]></category>

		<category domain="category" nicename="resourceful"><![CDATA[Resourceful]]></category>

		<category><![CDATA[Ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[Ruby]]></category>

		<category domain="tag"><![CDATA[Resourceful]]></category>

		<category domain="tag" nicename="resourceful"><![CDATA[Resourceful]]></category>

		<category domain="tag"><![CDATA[Ruby]]></category>

		<category domain="tag" nicename="ruby"><![CDATA[Ruby]]></category>

<guid isPermaLink="false">http://www.theamazingrando.com/blog/?p=25</guid>
<description></description>
<content:encoded><![CDATA[I just commited a change that allows you to specify some default headers to attach to all requests made on a resource. Best shown in an example, I'll use the sample code I gave in my [last post][]:

    require 'rubygems'
    require 'resourceful'
     
    http = Resourceful::HttpAccessor.new(:logger => Resourceful::StdOutLogger.new,
                                         :cache_manager => Resourceful::InMemoryCacheManager.new)
     
     
    res = http.resource("http://core.ssbe.localhost/service_desciptors", 
                        :accept => 'application/json')
     
    res.get
    res.get

Just a little less typing required.

[last post]: http://www.theamazingrando.com/blog/index.php/2008/07/31/resourceful-021/
]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>25</wp:post_id>
<wp:post_date>2008-07-31 13:56:20</wp:post_date>
<wp:post_date_gmt>2008-07-31 20:56:20</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>resourceful-adding-default-option</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1219947545</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>2</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_old_slug</wp:meta_key>
<wp:meta_value>resourceful-adding-default-options</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Application-wide Config loader for Merb Apps</title>
<link>http://www.theamazingrando.com/blog/?p=34</link>
<pubDate>Thu, 28 Aug 2008 17:38:29 +0000</pubDate>
<dc:creator><![CDATA[Paul Sadauskas]]></dc:creator>

		<category><![CDATA[Merb]]></category>

		<category domain="category" nicename="merb"><![CDATA[Merb]]></category>

		<category><![CDATA[Ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[Ruby]]></category>

		<category domain="tag"><![CDATA[Merb]]></category>

		<category domain="tag" nicename="merb"><![CDATA[Merb]]></category>

		<category domain="tag"><![CDATA[Ruby]]></category>

		<category domain="tag" nicename="ruby"><![CDATA[Ruby]]></category>

<guid isPermaLink="false">http://www.theamazingrando.com/blog/?p=34</guid>
<description></description>
<content:encoded><![CDATA[I saw [this post by Stephen Bartholomew](http://www.stephenbartholomew.co.uk/2008/8/22/simple-application-wide-configuration-in-rails) and thought that it was a pretty neat idea, so I adapted it for Merb applications. Merb already has the `Merb::Config` for storing config options, so I just added the config options to that, rather than the AppConfig class used in Steve's post. That also greatly simplifies its implementation:

    require 'yaml'
    
    class AppConfig  
      def self.load
        config_file = File.join(Merb.root, "config", "application.yml")
    
        if File.exists?(config_file)
          config = YAML.load(File.read(config_file))[Merb.environment]
    
          config.keys.each do |key|
            Merb::Config[key.to_sym] = config[key]
          end
        end
      end
    end

Put that in `lib/app_config.rb`. Then, anywhere in `config/init.rb`, add:

    Merb::BootLoader.after_app_loads do
      require 'app_config'
      AppConfig.load
    end

Finally, add your config options to `config/application.yml`, using the same `development`, `production`, etc environment keys as in the `database.yml`. I use it to keep the connection params for a couple non-RDBMS [DataMapper](http://datamapper.org) adapters I've written.


]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>34</wp:post_id>
<wp:post_date>2008-08-28 10:38:29</wp:post_date>
<wp:post_date_gmt>2008-08-28 17:38:29</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>application-wide-config-loader-for-merb-apps</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1219946896</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>2</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>1672</wp:comment_id>
<wp:comment_author><![CDATA[Luke Redpath]]></wp:comment_author>
<wp:comment_author_email>contact@lukeredpath.co.uk</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>82.4.252.79</wp:comment_author_IP>
<wp:comment_date>2008-10-15 03:38:20</wp:comment_date>
<wp:comment_date_gmt>2008-10-15 10:38:20</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>SimpleConfig should work with Merb:</p>

<p>http://github.com/lukeredpath/simpleconfig/tree/master</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>2687</wp:comment_id>
<wp:comment_author><![CDATA[Scott Motte]]></wp:comment_author>
<wp:comment_author_email>scott@scottmotte.com</wp:comment_author_email>
<wp:comment_author_url>http://scottmotte.com</wp:comment_author_url>
<wp:comment_author_IP>76.166.141.3</wp:comment_author_IP>
<wp:comment_date>2009-02-17 15:53:00</wp:comment_date>
<wp:comment_date_gmt>2009-02-17 22:53:00</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>With Merb's new setup make sure you have rake in the settings.yml. Otherwise, when running rake db:automigrate you will get an undefined method `keys’ for nil:NilClass error.</p>

<p>example:
rake:
  &lt;&lt;: *defaults</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>2497</wp:comment_id>
<wp:comment_author><![CDATA[Scott Motte]]></wp:comment_author>
<wp:comment_author_email>scott@scottmotte.com</wp:comment_author_email>
<wp:comment_author_url>http://scottmotte.com</wp:comment_author_url>
<wp:comment_author_IP>68.183.153.113</wp:comment_author_IP>
<wp:comment_date>2009-02-01 18:55:22</wp:comment_date>
<wp:comment_date_gmt>2009-02-02 01:55:22</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>Thanks Paul. This was helpful.</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>HOWTO: DataMapper - Setting the default repository for a model</title>
<link>http://www.theamazingrando.com/blog/?p=39</link>
<pubDate>Thu, 28 Aug 2008 21:33:38 +0000</pubDate>
<dc:creator><![CDATA[Paul Sadauskas]]></dc:creator>

		<category><![CDATA[Ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[Ruby]]></category>

<guid isPermaLink="false">http://www.theamazingrando.com/blog/?p=39</guid>
<description></description>
<content:encoded><![CDATA[Had to google for quite a while before I was able to find the solution. Essentially, I have a model that I want to always use a different repository than what I `#setup` in `:default`. To do that:

    class Person
      include DataMapper::Resource

      def self.default_repository_name
        :other
      end

      property :name, String
    # ...
    end

This will make `Person.all` and all other queries use the `:other` repository, without having to use the `#repository(:other) { }` block.
    
]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>39</wp:post_id>
<wp:post_date>2008-08-28 14:33:38</wp:post_date>
<wp:post_date_gmt>2008-08-28 21:33:38</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>howto-datamapper-setting-the-default-repository-for-a-model</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1219959218</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>2</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>HOWTO: Getting a sidebar in Merb</title>
<link>http://www.theamazingrando.com/blog/?p=41</link>
<pubDate>Mon, 15 Sep 2008 19:46:54 +0000</pubDate>
<dc:creator><![CDATA[Paul Sadauskas]]></dc:creator>

		<category><![CDATA[Merb]]></category>

		<category domain="category" nicename="merb"><![CDATA[Merb]]></category>

		<category><![CDATA[Rails]]></category>

		<category domain="category" nicename="rails"><![CDATA[Rails]]></category>

		<category><![CDATA[Ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[Ruby]]></category>

		<category domain="tag"><![CDATA[howto]]></category>

		<category domain="tag" nicename="howto"><![CDATA[howto]]></category>

		<category domain="tag"><![CDATA[Merb]]></category>

		<category domain="tag" nicename="merb"><![CDATA[Merb]]></category>

		<category domain="tag"><![CDATA[Ruby]]></category>

		<category domain="tag" nicename="ruby"><![CDATA[Ruby]]></category>

<guid isPermaLink="false">http://www.theamazingrando.com/blog/?p=41</guid>
<description></description>
<content:encoded><![CDATA[In several of my pages, I have a side-bar menu-y thingie. I didn't want to have to rewrite a controller-specific layout each time, but luckily Merb supports something similar to [Rails's content_for][content_for] block that [I wrote about earlier][content_for blog post]. In Merb, its done using `throw_content`([API][throw_content]) and `catch_content`([API][catch_content]).

Put the `catch_content` into your application layout view. You probably already have `catch_content :for_layout` in there, by default. Here's what mine looks like:

    %html
      %head
        %meta{:'http-equiv' => 'content-type', 'content' => 'application/xhtml+xml; charset=UTF-8'}

        = css_include_tag "layout", "style"

        %title Page with Sidebar

      %body

        #side-bar
          = catch_content :sidebar

        #main
          = catch_content :for_layout

        #footer
          .left= copyright
          .right= last_modified

Using haml, I've put my sidebar in a `div` with id `#side-bar`.

Now in the view, add a `throw_content` for what you want in the sidebar. In my case, I'm using a partial that gets picked up out of the controller's view directory automatically.


    - throw_content(:sidebar, partial('sidebar'))

    %h1 This page has a sidebar


And ta-da! I only have to write the sidebar partial once for each controller, and I don't have to write an extra layout for each one. I have a fairly uncomplicated layout, and fill out the various parts of it by throwing rendered partials into it. 

[content_for]: http://api.rubyonrails.org/classes/ActionView/Helpers/CaptureHelper.html#M001751
[content_for blog post]: http://www.theamazingrando.com/blog/?p=7
[throw_content]: http://merb.rubyforge.org/classes/Merb/ViewContextMixin.html#M000146
[catch_content]: http://merb.rubyforge.org/classes/Merb/RenderMixin.html#M000129
]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>41</wp:post_id>
<wp:post_date>2008-09-15 12:46:54</wp:post_date>
<wp:post_date_gmt>2008-09-15 19:46:54</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>howto-getting-a-sidebar-in-merb</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1221508014</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>2</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>HOWTO: Exception Handling in Merb</title>
<link>http://www.theamazingrando.com/blog/?p=46</link>
<pubDate>Tue, 30 Sep 2008 22:31:30 +0000</pubDate>
<dc:creator><![CDATA[Paul Sadauskas]]></dc:creator>

		<category><![CDATA[Merb]]></category>

		<category domain="category" nicename="merb"><![CDATA[Merb]]></category>

		<category domain="tag"><![CDATA[howto]]></category>

		<category domain="tag" nicename="howto"><![CDATA[howto]]></category>

		<category domain="tag"><![CDATA[Merb]]></category>

		<category domain="tag" nicename="merb"><![CDATA[Merb]]></category>

		<category domain="tag"><![CDATA[Ruby]]></category>

		<category domain="tag" nicename="ruby"><![CDATA[Ruby]]></category>

<guid isPermaLink="false">http://www.theamazingrando.com/blog/?p=46</guid>
<description></description>
<content:encoded><![CDATA[Our app is very (JSON) web-service heavy, and so having helpful error messages in our web service documents is pretty important. Luckily, Merb makes this, like everything, a metric shitton easier than it is in rails. There are a couple poorly documented things I had to stumble through, so I thought I would write some up on how to do this.

In Merb, if anything raises an exception, it looks for an action with the same name in the Exceptions controller. `merb-gen` gave you a simple one in `app/controllers/exception.rb`. Here's what mine looks like now:

`app/controllers/exceptions.rb`

    class Exceptions < Application
      provides :json                                                  # [1]
      
      # handle NotFound exceptions (404)
      def not_found
        return standard_error if content_type == :json                # [2]
        render
      end

      # handle NotAcceptable exceptions (406)
      def not_acceptable
        return standard_error if content_type == :json
        render
      end

      # handle NotAuthorized exceptions (403)
      def not_authorized
        return standard_error if content_type == :json
        render
      end

      # Everything else (500)
      def standard_error                                              # [3]
        # Re-Raise so we get the pretty merb error document instead.
        raise request.exceptions.first if content_type == :html       # [4]

        @exceptions = request.exceptions
        @show_details = Merb::Config[:exception_details]
        render :standard_error                                        # [5]
      end

    end

Some things to note about what I've done:

 1. Make sure it `#provides` for the web-service content-type.
 2. Since I just wanted to use the same view template for every error (see below), I had to explicitly make all web-service calls render that action instead. I could have just removed those methods and deleted the templates, but then any html views in the app would be generic, and I wanted custom ones for 403 and 404.
 3. Since all errors inherit from `StandardError`, this will catch everything.
 4. However, in the case of HTML documents, we want to use the fancy merb one, so re-raise the error so that merb's default error controller will handle it for us.
 5. Set up some variables to use in the view, then render that. *Be sure to include `:standard_error` so that the other error handlers know which template to render!*

And finally, here's what my view looks like. You can do whatever you want, of course. `#j` is just a global helper I have that basically does `#to_json` on whatever you give it, with some special cases for date formatting and indenting in dev vs production.

`app/views/exceptions/standard_error.json.erb`:

    <%= j( {
      :_type        => "InternalServerError",
      :request_uri  => request.env['REQUEST_URI'],
      :parameters   => params,
      :exceptions   => @exceptions.map do |exception|
        {
          :name       => exception.class,
          :message    => exception.message,
          :backtrace  => @show_details ? exception.backtrace : exception.backtrace.first.to_a
        }
      end
    } ) %>


]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>46</wp:post_id>
<wp:post_date>2008-09-30 15:31:30</wp:post_date>
<wp:post_date_gmt>2008-09-30 22:31:30</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>howto-exception-handling-in-merb</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1223310831</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>2</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>1662</wp:comment_id>
<wp:comment_author><![CDATA[Jack Dempsey]]></wp:comment_author>
<wp:comment_author_email>jack.dempsey@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://jackndempsey.blogspot.com</wp:comment_author_url>
<wp:comment_author_IP>65.14.229.26</wp:comment_author_IP>
<wp:comment_date>2008-10-04 18:00:27</wp:comment_date>
<wp:comment_date_gmt>2008-10-05 01:00:27</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>Very nice Paul, thanks for the writeup. I imagine the standard_error in #2 is missing its colon, right? Tiny thing just wanted to be sure.</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>1663</wp:comment_id>
<wp:comment_author><![CDATA[Jack Dempsey]]></wp:comment_author>
<wp:comment_author_email>jack.dempsey@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://jackndempsey.blogspot.com</wp:comment_author_url>
<wp:comment_author_IP>69.143.55.253</wp:comment_author_IP>
<wp:comment_date>2008-10-05 07:27:43</wp:comment_date>
<wp:comment_date_gmt>2008-10-05 14:27:43</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>One more note: json_pure defines a #j method that prints things to stdout out. For those looking to try this blog entry out, make sure you either do as Paul's done and define your own #j method, or write a new helper, and avoid the confusion of json going to stdout.</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>1669</wp:comment_id>
<wp:comment_author><![CDATA[Paul Sadauskas]]></wp:comment_author>
<wp:comment_author_email>psadauskas@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://theamazingrando.com/blog</wp:comment_author_url>
<wp:comment_author_IP>69.15.81.122</wp:comment_author_IP>
<wp:comment_date>2008-10-06 09:32:15</wp:comment_date>
<wp:comment_date_gmt>2008-10-06 16:32:15</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>Actually, there shouldn't be the colons in any of the <code>return standard_error</code> lines. I want to return the results of the <code>standard_error</code> method/action in the other method/action. Thanks for pointing that out, and about the #j method. I wasn't aware the the method already existed, but dumping something to stdout doesn't seem all that useful in a webapp, so I don't feel bad about it.</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>2</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>HOWTO: Better JSON parsing when POSTing to Merb Apps</title>
<link>http://www.theamazingrando.com/blog/?p=50</link>
<pubDate>Thu, 09 Oct 2008 21:43:55 +0000</pubDate>
<dc:creator><![CDATA[Paul Sadauskas]]></dc:creator>

		<category><![CDATA[Merb]]></category>

		<category domain="category" nicename="merb"><![CDATA[Merb]]></category>

		<category><![CDATA[Ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[Ruby]]></category>

		<category domain="tag"><![CDATA[howto]]></category>

		<category domain="tag" nicename="howto"><![CDATA[howto]]></category>

		<category domain="tag"><![CDATA[Merb]]></category>

		<category domain="tag" nicename="merb"><![CDATA[Merb]]></category>

		<category domain="tag"><![CDATA[Ruby]]></category>

		<category domain="tag" nicename="ruby"><![CDATA[Ruby]]></category>

<guid isPermaLink="false">http://www.theamazingrando.com/blog/?p=50</guid>
<description></description>
<content:encoded><![CDATA[Where I work, we have fairly extensive, JSON-based web services in all out applications. As a quick example, here's what you would get if you were to `GET` `http://config.ssbe.example.com/configurations/90` with the mime-type `application/vnd.absperf.sscj1+json`:

    {
      "_type":                      "Configuration",
      "href":                       "http://config.ssbe.localhost/configurations/90",
      "id":                         "4c5895f2-28a3-4299-a558-270889e6f065",
      "name":                       "lacquered",
      "notes":                      "Hosted hundredfold broomstick",
      "platform":                   "AIX",
      "client_href":                "http://core.ssbe.localhost/clients/jousting",
      "registered_templates_href":  "http://config.ssbe.localhost/configurations/90/registered_templates",
      "parent_configuration_href":  "http://config.ssbe.localhost/configurations/90",
      "created_at":                 "2008-10-07T16:38:29-06:00",
      "updated_at":                 "2008-10-08T15:20:51-06:00"
    }

I'm planning on a bigger post about exactly what our JSON document means, and our mime-types, and everything. For now, a good explaination of the reasoning behind our mime-types can be found [over on Peter's blog][VersioningRest].

That aside, now that I've `GET`ed this document, I'd love to be able to just string-manipulate the one or two things I want to modify, and just `PUT` it back where I got it, in the same format, with all the same attributes. The problem with that, though, is that several of these attributes are determined server-side, such as `_type`, `href`, and `id`. These values a set by the server, and a few of them aren't even properties on the model. I could throw an error back when someone tries to submit a value for an unchangeable attribute, but then I wouldn't be able to `POST` the identical document that I just `GET`ed. I'd have to know a fair amount about the document to know which attributes I have to remove from the document before I can give it back. I'd much prefer the server just ignore it. Now, I could throw an error if someone tries to *change* one of these attributes, but I'll save that for later. In any event, right now, I just want my controller to parse the JSON, and let it ignore the attributes I don't care about.

To that end, I implemented a custom JSON parser in a before filter in my Application controller:

    class Application < Merb::Controller
      before :parse_supplied_sscj1, :if => :has_sscj1_content         #[1]

      def has_sscj1_content
        request.content_type == 'application/vnd.absperf.sscj1+json'  #[2]
      end

      def parse_supplied_sscj1
        begin 
          jobj = JSON.parse(request.raw_post)                         #[3]
          raise UnprocessableEntity unless jobj.is_a?(Hash)           #[4]

          model_class = jobj["_type"].snake_case                      #[5]

          params[model_class] = jobj
        rescue JSON::ParserError => e
          raise BadRequest.new(e.message)                             #[6]
        end
      end
    end

A brief description of what all this means:

 1. Set up the before filter to do the parsing, but only under the right conditions.
 2. Those conditions are merely if somebody set the `Content-Type` header on the request to my `sscj1` mime-type.
 3. JSON parse the body of the request. Request#raw_post is how you get to the raw data that was `POST`ed (and `PUT`, too)
 4. I expect every JSON document i get to be parsed into a Hash object, so throw a standard HTTP error if its not.
 5. Because I have the `_type` attribute in my document, I can use that to put the parsed attributes in the right place. From the example above, I end up with `params = {"configuration" => {"name" => "lacquered", ...}, ...}`
 6. Oh, and if we got an invalid (unparseable) JSON document, raise a 400 Bad Request error.

So that takes care of the JSON parsing. Its a little better than the one built-in to merb, because of the error handling, and putting the attributes into a useable place in the form. Now, what do we do about the attributes we want to ignore? I added a couple class methods to Controller for handling that.

    class Application < Merb::Controller
      class << self
        attr_accessor :attributes_to_ignore

        def ignore_attributes(*attrs)
          @attributes_to_ignore = attrs
        end

      end

      def attributes_to_ignore
        %w[_type href id created_at updated_at] + self.class.attributes_to_ignore
      end

    end

    class Configurations < Application
      provides :sscj1

      ignore_attributes 'registered_templates_href'

      # ...
    end

This is all pretty simple. Essentially, I just added a `#ignore_attributes` class method to my controllers, so I can provide a list of attributes to be ignored, specific to each controller. The `#attributes_to_ignore` method lists the default ones, and in this case, I want my configurations to ignore `registered_templates_href` in addition to those. Now I can just delete those from the parsed JSON object in my `#parse_supplied_sscj1` method:

      attributes_to_ignore.each do |key|
        jobj.delete(key)
      end

Simple!

Now, I have that pesky `parent_configuration_href` attribute still coming in. I dont want to ignore it, but I do need a `parent_id` attribute in my configuration model, representing a self-referential join. To do that, I'd love to be able to run the given uri through merb's router and parse out the `id`, but unfortunetly, thats not part of the public API (yet). I'll just have to write my own simple regex parser to pull it out, and have a nice clever way to set that in my Configurations controller. So on to the code:

    class Application < Merb::Controller
      class << self
        attr_accessor :attributes_to_alter
        def alter_attribute(attribute, &block)
          @attributes_to_alter ||= {}
          @attributes_to_alter[attribute] = block
        end
      end
      def attributes_to_alter
        Merb.logger.info self.class.attributes_to_alter.inspect
        self.class.attributes_to_alter || {}
      end

    end

    class Configurations < Application
      provides :sscj1

      alter_attribute 'parent_configuration_href' do |_,uri|
        {'parent_id' => extract_configuration_id(uri)}
      end

      def self.extract_configuration_id(uri)
        return nil unless uri
        %r{/configurations/(\d+)}.match(uri)
        $1
      end

    end

So, here we have something similar to the `#ignore_attributes`, except now we have a block to be called on the attribute we want to change. In this case, I match the `configurations` part of the URI, and capture the `id`. Then , in my `#parse_supplied_sscj1` method, I replace the old value with the new one:

    def parse_supplied_sscj1
      begin 
        jobj = JSON.parse(request.raw_post)
        raise UnprocessableEntity unless jobj.is_a?(Hash)

        model_class = jobj["_type"].snake_case

        attributes_to_ignore.each do |key|
          jobj.delete(key)
        end

        attributes_to_alter.each do |attribute, block|
          new_attrs = block.call(attribute, jobj.delete(attribute))
          jobj.merge!(new_attrs)
        end

        params[model_class] = jobj
      rescue JSON::ParserError => e
        raise BadRequest.new(e.message)
      end
    end

Thats the entire method that I'm using right now. I hope to package this all up as a merb plugin soon, keep and eye on my github, and I'll probably post something about it here, soon.


[VersioningRest]: http://barelyenough.org/blog/2008/05/versioning-rest-web-services/
]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>50</wp:post_id>
<wp:post_date>2008-10-09 14:43:55</wp:post_date>
<wp:post_date_gmt>2008-10-09 21:43:55</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>howto-better-json-parsing-when-posting-to-merb-apps</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1223588635</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>2</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>DataMapper 0.9.6 released</title>
<link>http://www.theamazingrando.com/blog/?p=63</link>
<pubDate>Mon, 13 Oct 2008 05:36:47 +0000</pubDate>
<dc:creator><![CDATA[Paul Sadauskas]]></dc:creator>

		<category><![CDATA[Datamapper]]></category>

		<category domain="category" nicename="datamapper"><![CDATA[Datamapper]]></category>

		<category domain="tag"><![CDATA[Datamapper]]></category>

		<category domain="tag" nicename="datamapper"><![CDATA[Datamapper]]></category>

		<category domain="tag"><![CDATA[Merb]]></category>

		<category domain="tag" nicename="merb"><![CDATA[Merb]]></category>

<guid isPermaLink="false">http://www.theamazingrando.com/blog/?p=63</guid>
<description></description>
<content:encoded><![CDATA[I just pushed 0.9.6 of dm-core, dm-more and data_objects up to rubyforge, as well as 0.9.8 of extlib. There's several bugfixes that were applied in the runup to merbcamp. This is also preparing for the imminent release of merb 1.0RC1.

]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>63</wp:post_id>
<wp:post_date>2008-10-12 22:36:47</wp:post_date>
<wp:post_date_gmt>2008-10-13 05:36:47</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>datamapper-096-released</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>2</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1223876207</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Merbcamp</title>
<link>http://www.theamazingrando.com/blog/?p=54</link>
<pubDate>Mon, 13 Oct 2008 06:00:56 +0000</pubDate>
<dc:creator><![CDATA[Paul Sadauskas]]></dc:creator>

		<category><![CDATA[Merb]]></category>

		<category domain="category" nicename="merb"><![CDATA[Merb]]></category>

		<category><![CDATA[Ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[Ruby]]></category>

		<category domain="tag"><![CDATA[Merb]]></category>

		<category domain="tag" nicename="merb"><![CDATA[Merb]]></category>

		<category domain="tag"><![CDATA[merbcamp]]></category>

		<category domain="tag" nicename="merbcamp"><![CDATA[merbcamp]]></category>

<guid isPermaLink="false">http://www.theamazingrando.com/blog/?p=54</guid>
<description></description>
<content:encoded><![CDATA[Here's my own personal store of interesting crap I picked up in merbcamp. I'll add to this as the talks go on.

 * carllerche is a pretty cool guy for adding useful stuff to the merb router for me
 * mauth is pretty sweet
 * When can I get a 4K tv in my living room?
 * [FiveRuns tuneup for merb][tuneup-merb]
 * [webrat][] looks to make acceptance specs/stories actually useable
 * Ruby Language book by Matz is a good read for learning the internals of Ruby


[webrat]: http://github.com/brynary/webrat/tree/master
[tuneup-merb]: http://blog.fiveruns.com/2008/10/11/fiveruns-tuneup-for-merb
]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>54</wp:post_id>
<wp:post_date>2008-10-12 23:00:56</wp:post_date>
<wp:post_date_gmt>2008-10-13 06:00:56</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>merbcamp</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1223875778</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>2</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>The car</title>
<link>http://www.theamazingrando.com/blog/?attachment_id=65</link>
<pubDate>Sun, 16 Nov 2008 03:42:11 +0000</pubDate>
<dc:creator><![CDATA[Paul Sadauskas]]></dc:creator>

		<category><![CDATA[Ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[Ruby]]></category>

<guid isPermaLink="false">http://www.theamazingrando.com/blog/wp-content/uploads/2008/11/cp1_1115081208.jpg</guid>
<description></description>
<content:encoded><![CDATA[Its dirty, they washed it before they gave it to me]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>65</wp:post_id>
<wp:post_date>2008-11-15 20:42:11</wp:post_date>
<wp:post_date_gmt>2008-11-16 03:42:11</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>cp1_1115081208</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>67</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:attachment_url>http://www.theamazingrando.com/blog/wp-content/uploads/2008/11/cp1_1115081208.jpg</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/srv/www/theamazingrando.com/htdocs/blog/wp-content/uploads/2008/11/cp1_1115081208.jpg</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:5:{s:5:"width";i:1280;s:6:"height";i:670;s:14:"hwstring_small";s:23:"height='67' width='128'";s:4:"file";s:86:"/srv/www/theamazingrando.com/htdocs/blog/wp-content/uploads/2008/11/cp1_1115081208.jpg";s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Sexy (Not me, the car)</title>
<link>http://www.theamazingrando.com/blog/?attachment_id=66</link>
<pubDate>Sun, 16 Nov 2008 03:43:13 +0000</pubDate>
<dc:creator><![CDATA[Paul Sadauskas]]></dc:creator>

		<category><![CDATA[Ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[Ruby]]></category>

<guid isPermaLink="false">http://www.theamazingrando.com/blog/wp-content/uploads/2008/11/cp1_1115081245a.jpg</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>66</wp:post_id>
<wp:post_date>2008-11-15 20:43:13</wp:post_date>
<wp:post_date_gmt>2008-11-16 03:43:13</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>cp1_1115081245a</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>67</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:attachment_url>http://www.theamazingrando.com/blog/wp-content/uploads/2008/11/cp1_1115081245a.jpg</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/srv/www/theamazingrando.com/htdocs/blog/wp-content/uploads/2008/11/cp1_1115081245a.jpg</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:5:{s:5:"width";i:1280;s:6:"height";i:652;s:14:"hwstring_small";s:23:"height='65' width='128'";s:4:"file";s:87:"/srv/www/theamazingrando.com/htdocs/blog/wp-content/uploads/2008/11/cp1_1115081245a.jpg";s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>I boughted a car!</title>
<link>http://www.theamazingrando.com/blog/?p=67</link>
<pubDate>Sun, 16 Nov 2008 03:45:05 +0000</pubDate>
<dc:creator><![CDATA[Paul Sadauskas]]></dc:creator>

		<category><![CDATA[Personal]]></category>

		<category domain="category" nicename="personal"><![CDATA[Personal]]></category>

<guid isPermaLink="false">http://www.theamazingrando.com/blog/?p=67</guid>
<description></description>
<content:encoded><![CDATA[Mazda3 5-door. Its pretty:

<a href="http://www.theamazingrando.com/blog/wp-content/uploads/2008/11/cp1_1115081208.jpg"><img src="http://www.theamazingrando.com/blog/wp-content/uploads/2008/11/cp1_1115081208.jpg" alt="" title="The car" width="300" height="157" class="alignnone size-medium wp-image-65" /></a>
<a href="http://www.theamazingrando.com/blog/wp-content/uploads/2008/11/cp1_1115081245a.jpg"><img src="http://www.theamazingrando.com/blog/wp-content/uploads/2008/11/cp1_1115081245a.jpg" alt="" title="Sexy (Not me, the car)" width="300" height="152" class="alignnone size-medium wp-image-66" /></a>]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>67</wp:post_id>
<wp:post_date>2008-11-15 20:45:05</wp:post_date>
<wp:post_date_gmt>2008-11-16 03:45:05</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>i-boughted-a-car</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1226807105</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>2</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>2020</wp:comment_id>
<wp:comment_author><![CDATA[Pat]]></wp:comment_author>
<wp:comment_author_email>pats@etoolsmiths.com</wp:comment_author_email>
<wp:comment_author_url>http://www.etoolsmiths.com</wp:comment_author_url>
<wp:comment_author_IP>24.62.111.36</wp:comment_author_IP>
<wp:comment_date>2008-12-21 01:56:57</wp:comment_date>
<wp:comment_date_gmt>2008-12-21 08:56:57</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>Just wanted to be sure: "The Amazing Rando"  is an MST3k reference, right?
thanks
sorry if you already answered this.
pat--BIG MST3K fan</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>Wildfires in Boulder</title>
<link>http://www.theamazingrando.com/blog/?p=73</link>
<pubDate>Thu, 08 Jan 2009 01:15:19 +0000</pubDate>
<dc:creator><![CDATA[Paul Sadauskas]]></dc:creator>

		<category><![CDATA[Ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[Ruby]]></category>

<guid isPermaLink="false">http://www.theamazingrando.com/blog/?p=73</guid>
<description></description>
<content:encoded><![CDATA[Here's the view out my kitchen window, most mornings:<br />
<a href="http://picasaweb.google.com/lh/photo/if5JeHUe16PKKCpjWYj44g?feat=embedwebsite"><img src="http://lh6.ggpht.com/_WEBSr9gkXQM/RPsquxnPABI/AAAAAAAAACQ/dbaIpaY55MU/s400/IMG_0096.JPG" /></a>

Here's what it looks like this fine evening:

<table style="width:auto;"><tr><td><a href="http://picasaweb.google.com/lh/photo/EVVxym2W0cCXxa3ZSbaGTQ?feat=embedwebsite"><img src="http://lh5.ggpht.com/_WEBSr9gkXQM/SWVQJ4kMFEI/AAAAAAAAEKQ/uKQOKm2LqxM/s400/img_0317.jpg" /></a></td></tr><tr><td style="font-family:arial,sans-serif; font-size:11px; text-align:right">From <a href="http://picasaweb.google.com/psadauskas/Fire?feat=embedwebsite">fire</a></td></tr></table>

Click the album link for more. From my porch, I can see parts of the mountainside flashing from the lights of the fire trucks. They've evacuated 11,000 homes, but the wind is blowing the fire the other direction. There have been clouds of smoke all afternoon, but once the sun set, I has able to see the flames.

More details about the fires here: <a href="http://www.dailycamera.com/news/2009/jan/07/i-70-closed-over-vail-pass-avalanche-control/">http://www.dailycamera.com/news/2009/jan/07/i-70-closed-over-vail-pass-avalanche-control/</a>
]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>73</wp:post_id>
<wp:post_date>2009-01-07 18:15:19</wp:post_date>
<wp:post_date_gmt>2009-01-08 01:15:19</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>wildfires-in-boulder</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1231395451</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>2</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Ruby Dir.glob bug</title>
<link>http://www.theamazingrando.com/blog/?p=77</link>
<pubDate>Mon, 19 Jan 2009 18:07:42 +0000</pubDate>
<dc:creator><![CDATA[Paul Sadauskas]]></dc:creator>

		<category><![CDATA[Ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[Ruby]]></category>

		<category domain="tag"><![CDATA[Ruby]]></category>

		<category domain="tag" nicename="ruby"><![CDATA[Ruby]]></category>

<guid isPermaLink="false">http://www.theamazingrando.com/blog/?p=77</guid>
<description></description>
<content:encoded><![CDATA[To further elaborate on Yehuda's [twit](http://twitter.com/wycats/status/1124457823):

    [~/tmp][rando@apollo]
     % mkdir first first/second
    [~/tmp][rando@apollo]
     % touch first/second/test.txt
    [~/tmp][rando@apollo]
     % chmod -x first
    [~/tmp][rando@apollo]
     % ls first/second/*.txt
    ls: cannot access first/second/*.txt: Permission denied
    [~/tmp][rando@apollo]
     % irb
    irb(main):001:0> Dir.glob('first/second/*.txt')
    => []

If you try to glob some things in a directory that has some ancestor missing the eXecute permission, ruby doesn't give any indication of an error. 

This took Yehuda and I about 30 minutes to track down why a merb app wasn't loading bundled gems under passenger. Apache was running as nobody, and the parent dir of the app was missing the global execute permission.

]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>77</wp:post_id>
<wp:post_date>2009-01-19 11:07:42</wp:post_date>
<wp:post_date_gmt>2009-01-19 18:07:42</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>77</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>2</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1232388667</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>2402</wp:comment_id>
<wp:comment_author><![CDATA[Michael Ivey]]></wp:comment_author>
<wp:comment_author_email>ivey@gweezlebur.com</wp:comment_author_email>
<wp:comment_author_url>http://gweezlebur.com</wp:comment_author_url>
<wp:comment_author_IP>74.182.84.252</wp:comment_author_IP>
<wp:comment_date>2009-01-20 20:08:36</wp:comment_date>
<wp:comment_date_gmt>2009-01-21 03:08:36</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>What would you expect it to do? From Ruby's perspective, those files do not exist.</p>

<p>Dir["foo/bar/*"] where foo does not exist also returns []. It's the same thing.</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>2507</wp:comment_id>
<wp:comment_author><![CDATA[Paul Sadauskas]]></wp:comment_author>
<wp:comment_author_email>psadauskas@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://theamazingrando.com/blog</wp:comment_author_url>
<wp:comment_author_IP>67.173.255.144</wp:comment_author_IP>
<wp:comment_date>2009-02-03 12:38:17</wp:comment_date>
<wp:comment_date_gmt>2009-02-03 19:38:17</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>I would expect it to raise an error, just like <code>ls</code> did, not silently pretend that nothings wrong.</p>

<p>This exact bug caused me 6 hours of pain last week, because rubygems couldn't load any gems in a dir that was a great-grandchild of a dir that wasn't world-executable.</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>2</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>I'm Speaking at MountainWest!</title>
<link>http://www.theamazingrando.com/blog/?p=80</link>
<pubDate>Mon, 19 Jan 2009 19:11:30 +0000</pubDate>
<dc:creator><![CDATA[Paul Sadauskas]]></dc:creator>

		<category><![CDATA[Ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[Ruby]]></category>

<guid isPermaLink="false">http://www.theamazingrando.com/blog/?p=80</guid>
<description></description>
<content:encoded><![CDATA[I'm going to be giving a talk at [Mountain West Ruby Conf](http://mtnwestrubyconf.org/2009/speakers)!

For those of you too lazy to scroll down and find the details of my talk, I'll repeat them here:

> Some might think of DataMapper as a better, faster, competitor to ActiveRecord. However, they would be missing on of its greatest strengths. At its core, DataMapper provides a uniform interface on top of ANY persistance layer. All thats needed is a simple adapter class that can translate the native persitance into a simple 4-method API for DataMapper to consume. This talk will cover that API, and some best-practices on implementing an adapter. We will explore the YAML Adapter, which I will be writing for the purposes of this talk.

Wish me luck!]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>80</wp:post_id>
<wp:post_date>2009-01-19 12:11:30</wp:post_date>
<wp:post_date_gmt>2009-01-19 19:11:30</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>im-speaking-at-mountainwest</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>2</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1232392290</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>3494</wp:comment_id>
<wp:comment_author><![CDATA[Paul Sadauskas]]></wp:comment_author>
<wp:comment_author_email>psadauskas@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://theamazingrando.com/blog</wp:comment_author_url>
<wp:comment_author_IP>72.42.100.216</wp:comment_author_IP>
<wp:comment_date>2009-03-23 18:48:12</wp:comment_date>
<wp:comment_date_gmt>2009-03-24 01:48:12</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>Hi Rafael,</p>

<p>Thanks for your comment, you reminded me to post about it. My latest post has a link to my talk.</p>

<p>I am planning on writing a post about it, its in my drafts right now. I'm about to write another adapter, I'm going to use it as a reference for a full-fledged tutorial on adapter writing.</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>2</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>3356</wp:comment_id>
<wp:comment_author><![CDATA[Rafael Rosa]]></wp:comment_author>
<wp:comment_author_email>rafaelrosafu@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://www.rafaelrosafu.com</wp:comment_author_url>
<wp:comment_author_IP>189.120.49.163</wp:comment_author_IP>
<wp:comment_date>2009-03-19 06:39:51</wp:comment_date>
<wp:comment_date_gmt>2009-03-19 13:39:51</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>Hi,</p>

<p>I saw you were listed at Mountain West, but unfortunately there's no video. I'm working on DataMapper too, adding the I18n functionalities to dm-validations, and I'm very interested in your subject. Do you have any slides? Are you planning to post about writing adapters? It's a very interesting topic.</p>

<p>Cheers,
Rafael</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>HOWTO - Get a list of a class's subclasses</title>
<link>http://www.theamazingrando.com/blog/?p=82</link>
<pubDate>Wed, 04 Feb 2009 17:25:38 +0000</pubDate>
<dc:creator><![CDATA[Paul Sadauskas]]></dc:creator>

		<category><![CDATA[Ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[Ruby]]></category>

<guid isPermaLink="false">http://www.theamazingrando.com/blog/?p=82</guid>
<description></description>
<content:encoded><![CDATA[
I recently came across a situation where I had an AbstractClass, an I wanted to know all of the classes that had inherited from it. There were lots of implementations on the web, but that weren't exactly what I wanted, or they used ObjectSpace to get ALL the classes, and see if the interesting one was in its ancestors.

I only needed it one-level deep, but it would be fairly easy to extend it for more.

    class ParentClass
      def self.subclasses
        @subclasses ||= Set.new
      end

      def self.inherited(subclass)
        subclasses << subclass
      end
    end

    class ChildA < ParentClass; end
    class ChildB < ParentClass; end

    ParentClass.subclasses
    # => #<Set: {ChildA, ChildB}>

]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>82</wp:post_id>
<wp:post_date>2009-02-04 10:25:38</wp:post_date>
<wp:post_date_gmt>2009-02-04 17:25:38</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>howto-get-a-list-of-a-classs-subclasses</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1233768338</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>2</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>2517</wp:comment_id>
<wp:comment_author><![CDATA[cies breijs]]></wp:comment_author>
<wp:comment_author_email>cies@kde.nl</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>122.169.87.47</wp:comment_author_IP>
<wp:comment_date>2009-02-05 05:19:28</wp:comment_date>
<wp:comment_date_gmt>2009-02-05 12:19:28</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>i have some questions regarding this..</p>

<p>you use a instance var, @subclasses, in a class method, self.subclasses... is that not a strange thing to do? i expected a class var @@subclasses :-)</p>

<p>i was looking something along the lines of this, because i have DM model (hi dkubb!!) that can have a subclass structure. as some point i want the user to pick which particular subclass he'd like to use. in this case i need to know all the subclasses of this model -- this solution is by far the most pretty solution i've seen so far.</p>

<p>cheers,
_cies.</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>2521</wp:comment_id>
<wp:comment_author><![CDATA[cies breijs]]></wp:comment_author>
<wp:comment_author_email>cies@kde.nl</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>122.169.107.203</wp:comment_author_IP>
<wp:comment_date>2009-02-05 09:08:33</wp:comment_date>
<wp:comment_date_gmt>2009-02-05 16:08:33</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>i cannot figure out why @@subclasses  doesn't work and @subclasses does..</p>

<p>:-$</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>2514</wp:comment_id>
<wp:comment_author><![CDATA[Liam Morley]]></wp:comment_author>
<wp:comment_author_email>liam@carpeliam.com</wp:comment_author_email>
<wp:comment_author_url>http://www.carpeliam.com</wp:comment_author_url>
<wp:comment_author_IP>66.189.28.105</wp:comment_author_IP>
<wp:comment_date>2009-02-04 17:39:41</wp:comment_date>
<wp:comment_date_gmt>2009-02-05 00:39:41</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>@dkubb your case sounds like a job for the Template Method pattern.</p>

<p>I'm not saying that there's never a case for this, just saying it's rare, and you should really know that you need to do this before you do. :)</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>2513</wp:comment_id>
<wp:comment_author><![CDATA[Dan Kubb]]></wp:comment_author>
<wp:comment_author_email>dan@kubb.name</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>204.174.98.110</wp:comment_author_IP>
<wp:comment_date>2009-02-04 14:11:18</wp:comment_date>
<wp:comment_date_gmt>2009-02-04 21:11:18</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>@Liam: I can think of one case where I've needed this when writing DataMapper.</p>

<p>DataMapper lets you define properties in each class or subclass when using single table inheritance (STI).  When you ask a class to auto-migrate itself (create a table to contain it's instances) the job is delegated to the top-most ancestor, what DM calls the base model.  The base model then needs to ask all of it's descendants for their properties so it knows what columns to create in the table.  It uses this idiom to pull in all of it's descendants.</p>

<p>Granted it's pretty rare, but useful when you need it.</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>2524</wp:comment_id>
<wp:comment_author><![CDATA[Paul Sadauskas]]></wp:comment_author>
<wp:comment_author_email>psadauskas@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://theamazingrando.com/blog</wp:comment_author_url>
<wp:comment_author_IP>67.173.255.144</wp:comment_author_IP>
<wp:comment_date>2009-02-05 13:01:54</wp:comment_date>
<wp:comment_date_gmt>2009-02-05 20:01:54</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>@Liam: Specifically, I'm using it here: http://github.com/paul/dm-core/blob/ac0475928278a32969634ed075561c196eb11c57/lib/dm-core/conditions/comparisons.rb#L10</p>

<p>I wanted a method to be able to easily create an object, the type of which is based on a param. I also wanted it to be trivial for a plugin author to add more of these classes, and my method to automatically pick that up.</p>

<p>The traditional way to do this would be to use a <code>case</code> statement, but that would be much harder to extend. I'd have to have a registration method, and an author would have to remember to register their class. This way, someone can just do:</p>

<pre><code>class FooComparison &lt; AbstractComparison; slug :foo; end
</code></pre>

<p>Then they're able to use their Foo as a comparison automatically. <code>Condition.new(:foo, a, b)</code></p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>2</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>2512</wp:comment_id>
<wp:comment_author><![CDATA[Liam Morley]]></wp:comment_author>
<wp:comment_author_email>liam@carpeliam.com</wp:comment_author_email>
<wp:comment_author_url>http://www.carpeliam.com</wp:comment_author_url>
<wp:comment_author_IP>66.189.28.105</wp:comment_author_IP>
<wp:comment_date>2009-02-04 12:14:19</wp:comment_date>
<wp:comment_date_gmt>2009-02-04 19:14:19</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>Hmm, traditionally in OOP this is a bad idea, so I'm curious- why did you find this necessary?</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>I'm speaking at Boulder Ruby Group in 2 weeks</title>
<link>http://www.theamazingrando.com/blog/?p=84</link>
<pubDate>Sat, 07 Feb 2009 23:58:49 +0000</pubDate>
<dc:creator><![CDATA[Paul Sadauskas]]></dc:creator>

		<category><![CDATA[Ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[Ruby]]></category>

<guid isPermaLink="false">http://www.theamazingrando.com/blog/?p=84</guid>
<description></description>
<content:encoded><![CDATA[I'm going to be giving a practice run of the talk I'll be giving at [MountainWest][mtnwest] at the [Boulder Ruby Group][brg] meeting next Wednesday (18th, 7pm). Come see it and <del>tell me what I'm doing wrong</del> give me some constructive criticism.

[mtnwest]: http://mtnwestrubyconf.org/2009/
[brg]: http://boulderruby.org/meetings/2009/01/05/february-2009/]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>84</wp:post_id>
<wp:post_date>2009-02-07 16:58:49</wp:post_date>
<wp:post_date_gmt>2009-02-07 23:58:49</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>im-speaking-at-boulder-ruby-group-in-2-weeks</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1234051129</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>2</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>A Response to "Database Versioning"</title>
<link>http://www.theamazingrando.com/blog/?p=86</link>
<pubDate>Mon, 02 Mar 2009 19:36:50 +0000</pubDate>
<dc:creator><![CDATA[Paul Sadauskas]]></dc:creator>

		<category><![CDATA[Datamapper]]></category>

		<category domain="category" nicename="datamapper"><![CDATA[Datamapper]]></category>

		<category><![CDATA[Ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[Ruby]]></category>

		<category domain="tag"><![CDATA[Datamapper]]></category>

		<category domain="tag" nicename="datamapper"><![CDATA[Datamapper]]></category>

		<category domain="tag"><![CDATA[Migrations]]></category>

		<category domain="tag" nicename="migrations"><![CDATA[Migrations]]></category>

<guid isPermaLink="false">http://www.theamazingrando.com/blog/?p=86</guid>
<description></description>
<content:encoded><![CDATA[I was just going to post a comment in reply to [Adam Wiggins's Database Versioning post](http://adam.blog.heroku.com/past/2009/3/2/database_versioning/), but it ended up being pretty long, so I'll post a response here instead.

I'm the original author and current maintainer of the migrations plugin for datamapper. I spent a lot of time [thinking about AR migrations](http://www.theamazingrando.com/blog/?p=11) before I started writing it. I think that DM migrations have solved a few of the problems he has with AR migrations.

The part about screwing up a migration, and having to re-run it sounds more like a tooling problem. When I write a migration, I drop/create the db, and re-run all the migrations to 'test' it. (Also, the [DM migration specs](http://www.theamazingrando.com/blog/?p=21) should help with this.) Yeah, it blows away all your development data, but you should have fixtures or scripts or something to make it easy to recreate. 

There are also long-term plans for a plugin in datamapper to inspect the current database schema, examine the definitions in the models, then "infer" the migration that needs to take place. It will be impossible, of course, to guess at what kind of data migration might be needed, but I believe that migrations shouldn't touch data. If, given your fullname => firstname, lastname example, I add the new columns, and run a rake task to handle the data. After a few days/weeks, when I'm sure that every production server has been upgraded, and that task run, I'll write a migration to drop the fullname column.

I do agree that having the database schema living in two different places if very non-dry, but even his suggestion of a schema.yml would duplicate the column definitions that are present in datamapper models.So 

I've used these DM migrations in 2 projects now that have been in production for >6 months, and it fits in very well with my workflow. I tend to break up the migration files by table, so I end up with `schema/people.rb`, `schema/articles.rb`, `schema/comments.rb`, with each of those being a table in the db. Then inside one of the files, I list the migrations in version order: `1, :create_people_table`, `2, :add_firstname_lastname`, `3, :remove_fullname`. This lets me see at a glance what version I'm on for a particular table, and I don't have to worry about dependencies. If I do need to modify several tables at once, I have a simple rake task that tells me what the maximum version number is, so I can make one after it.

I think that tryring to use SHAs as version numbers would be even more annoying than epoch timestamps as versions. I do like the idea about the model/application requiring a specific version, and refusing to start otherwise. From a DataMapper POV, it would be easy to add a `#requires_db_version(5)` method to the model. I'm already in the habit of not using my models in migrations, by virtue of never writing data migrations. I even just usually write the migrations in raw SQL, it gives me more control over the table stucture when I really care.

So, essentially, DataMapper already provides the solution that Adam outlines in his post; Replace schema.yml with DataMapper model definitions, and have the discipline to not write data migrations. Write specs for your migrations, like everything else, and use DM migrations' sane versioning, rather than AR's irritating one, and you should be fine. There are definitely improvements to be made with DM migrations, to be sure, but I feel like I got the underlying design mostly right.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>86</wp:post_id>
<wp:post_date>2009-03-02 12:36:50</wp:post_date>
<wp:post_date_gmt>2009-03-02 19:36:50</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>a-response-to-database-versioning</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1236189773</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>2</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>DataMapper Echo Adapter</title>
<link>http://www.theamazingrando.com/blog/?p=91</link>
<pubDate>Wed, 11 Mar 2009 19:45:41 +0000</pubDate>
<dc:creator><![CDATA[Paul Sadauskas]]></dc:creator>

		<category><![CDATA[Ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[Ruby]]></category>

<guid isPermaLink="false">http://www.theamazingrando.com/blog/?p=91</guid>
<description></description>
<content:encoded><![CDATA[I just wrote a simple adapter that can be used to investigate the DM Adapter API, and debug your own adapter. Its really simple to use:

    DataMapper.setup(:default, 
                     :adapter => :echo, 
                     :echo => {:adapter => :in_memory})


Set the `:echo` option to and options hash or connection uri that can initialize the adapter you want to wrap. This will print out the method calls, arguments, and return values to STDOUT.

    #read
    query: #<DataMapper::Query @repository=:default 
                               @model=Article 
                               @fields=[#<DataMapper::Property @model=Article @name=:id>, 
                                        #<DataMapper::Property @model=Article @name=:title>] 
                               @links=[] @conditions=[] @order=[] @limit=nil @offset=0 
                               @reload=false @unique=false>
     # => [#<Article @id=1 @title="Test" @text=<not loaded>>]

[Its on github](http://github.com/paul/dm-echo-adapter/tree/master)
[Example output](http://gist.github.com/77614)


]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>91</wp:post_id>
<wp:post_date>2009-03-11 12:45:41</wp:post_date>
<wp:post_date_gmt>2009-03-11 19:45:41</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>datamapper-echo-adapter</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1236800741</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>2</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>I spoke at Mountain West!</title>
<link>http://www.theamazingrando.com/blog/?p=93</link>
<pubDate>Tue, 24 Mar 2009 01:44:50 +0000</pubDate>
<dc:creator><![CDATA[Paul Sadauskas]]></dc:creator>

		<category><![CDATA[Ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[Ruby]]></category>

<guid isPermaLink="false">http://www.theamazingrando.com/blog/?p=93</guid>
<description></description>
<content:encoded><![CDATA[Confreaks posted my talk. Everyone go make fun of that huge nerd up there!

<embed src='http://mwrc2009.confreaks.com/player.swf' height='380' width='640' allowscriptaccess='always' allowfullscreen='true' flashvars='image=images%2F14-mar-2009-16-10-writing-adapters-for-datamapper-paul-sadauskas-preview.jpg&file=http%3A%2F%2Fmwrc2009.confreaks.com%2Fvideos%2F14-mar-2009-16-10-writing-adapters-for-datamapper-paul-sadauskas-small.mp4&plugins=viral-1'/>

I pushed some of the changes I talked about to my [github branch](http://github.com/paul/dm-core/tree/conditions). This covers the Conditions objects.

Next on my personal roadmap for adapters one-point-oh edition are for Repository to handle turning the responses from adapters into Resource objects, if they aren't already.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>93</wp:post_id>
<wp:post_date>2009-03-23 18:44:50</wp:post_date>
<wp:post_date_gmt>2009-03-24 01:44:50</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>i-spoke-at-mountain-west</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1237859090</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>2</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Writing DataMapper Adapters - A Tutorial</title>
<link>http://www.theamazingrando.com/blog/?p=95</link>
<pubDate>Mon, 30 Mar 2009 21:33:33 +0000</pubDate>
<dc:creator><![CDATA[Paul Sadauskas]]></dc:creator>

		<category><![CDATA[Ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[Ruby]]></category>

<guid isPermaLink="false">http://www.theamazingrando.com/blog/?p=95</guid>
<description></description>
<content:encoded><![CDATA[Introduction
------------

The adapter API for DataMapper has been in a bit of flux recently. When I submitted
my proposal for a [talk at MountainWest][mwrc-talk], adapters were irritatingly complex to write.
You just needed to know too much about DataMapper's internals to be able to write one.
A week before the conference began, I started a significant effort to re-write the API to make
it easier. I succeeded, a little too well; my 30 minute talk only took 15. Since then,
I've written a couple more adapters from scratch, and refined the API further. This post
will serve as notes on the changes that I've made, and a tutorial on writing adapters.

The API changes are currently only in my branch, but they will be merged into the
[DataMapper/next][github-dm-next] branch. For now, you'll need to use my 
[adapters_1.0][github-adapters1.0] branch.

This tutorial will follow my process as I make a DataMapper adapter for [TokyoTyrant][tokyotyrant]. You
can grab the code from my github repo, [paul/dm-tokyotyrant-adapter][tt-adapter].

Setup
-----

I'll assume you know how to build a gem, and get it all set up using your favorite gem builder, 
so I'm going to skip all that. To begin, we only need a couple files. First (of course!), the spec:

### spec/dm-tokyotyrant-adapter_spec.rb

    require File.dirname(__FILE__) + '/spec_helper'
    
    require 'dm-core/spec/adapter_shared_spec'
    
    describe DataMapper::Adapters::TokyoTyrantAdapter do
      before :all do
        @adapter = DataMapper.setup(:default, :adapter   => 'tokyo_tyrant',
                                              :hostname  => 'localhost',
                                              :port      => 1978)
      end
    
      it_should_behave_like 'An Adapter'
    
    end

And thats all there is to it. We make an `@adapter` instance var, which gets returned from
`DataMapper.setup`, and then run the adapter shared spec. As of now, the shared spec is fairly
thorough, but its far from comprehensive. If we run this now, we'll get some errors about not finding
the `TokyoTyrantAdapter`. So, lets go make it.

Initialization
--------------

### lib/dm-tokyotyrant-adapter.rb

    require 'dm-core'
    require 'dm-core/adapters/abstract_adapter'       # 1
    
    require 'tokyotyrant'
    
    module DataMapper::Adapters
    
      class TokyoTyrantAdapter < AbstractAdapter      # 2
        include TokyoTyrant

        def initialize(name, options)
          super                                       # 3

          @options[:hostname] ||= 'localhost'         # 4
          @options[:port]     ||= 1978

          @db = RDB::new                              
        end
      end

    end

Some of this is pretty TokyoTyrant-specific. Since the Ruby API isn't very Rubyish, I'm going
to skip over a lot of it, and just talk about the DataMapper/adapter specific stuff. Referencing 
the comments in the code above:

1. `require` the abstract adapter explicitly, since its not `require`'d as part of requiring dm-core.
2. Make a class that follows the naming convention `#{AdapterName}Adapter` so that DataMapper can find it 
   when we use the `:adapter => 'adapter_name'` option. Inherit from AbstractAdapter as well, as it will 
   provide us with many helpers we'll be using.
3. Make an `initialize` method, and call super. This will turn any provided options into a Mash (a Hash
   that can use a string and a symbol as the same key. It handles a little other setup for you, as well.
4. The rest is Tyrant-specific, but useful to know. We set some default connection options, and initialze 
   a `@db` object.

If we run the spec now, it connects, and we get a bunch of pending specs, saying we need to implment `#read`, 
`#create`, etc...

    dm-tokyotyrant-adapter/master % rake spec
    (in /home/rando/dev/dm-tokyotyrant-adapter)
    *****
    
    Pending:
    
    DataMapper::Adapters::TokyoTyrantAdapter needs to support #create (Not Yet Implemented)
    /usr/lib/ruby/gems/1.8/gems/dm-core-0.10.0/lib/dm-core/spec/adapter_shared_spec.rb:52
    
    DataMapper::Adapters::TokyoTyrantAdapter needs to support #read (Not Yet Implemented)
    /usr/lib/ruby/gems/1.8/gems/dm-core-0.10.0/lib/dm-core/spec/adapter_shared_spec.rb:75
    
    DataMapper::Adapters::TokyoTyrantAdapter needs to support #update (Not Yet Implemented)
    /usr/lib/ruby/gems/1.8/gems/dm-core-0.10.0/lib/dm-core/spec/adapter_shared_spec.rb:107
    
    DataMapper::Adapters::TokyoTyrantAdapter needs to support #delete (Not Yet Implemented)
    /usr/lib/ruby/gems/1.8/gems/dm-core-0.10.0/lib/dm-core/spec/adapter_shared_spec.rb:129
    
    DataMapper::Adapters::TokyoTyrantAdapter needs to support #read and #create to test query matching (Not Yet Implemented)
    /usr/lib/ruby/gems/1.8/gems/dm-core-0.10.0/lib/dm-core/spec/adapter_shared_spec.rb:289
    
    Finished in 0.005982 seconds
    
    5 examples, 0 failures, 5 pending

Create
--------

    def create(resources)                                     # 1
      db do |db|                                              # 2
        resources.each do |resource|                          # 3
          initialize_identity_field(resource, rand(2**32))    # 4
          save(db, key(resource), serialize(resource))        # 5
        end
      end
    end

1. `resources` is an Array of DataMapper Resource objects.
2. `#db` is a helper to make TokyoTyrant's api a little more friendly. It handles connecting to the 
   ttserver, and yields the connection to the block. When finished, it closes the connetion.
3. Some adapters might be able to support bulk creates, like SQL INSERT. This one doesn't, so we'll loop 
   over every resource.
4. We'll need to set the identity field. More on this later.
5. Put the resource into the database. `#key` and `#serialize` are helpers, I'll explain them in a bit.

Something useful to note here: The resources being passed in to this method are the actual resources in use by DataMapper. That 
means that any modifications you make to them will also be automatically availble to anything using DataMapper. This is extremely 
useful for any data store that can provide a representation of the created object. If the data store set some fields as a result
of creation, eg, a `created_at` timestamp, or an `href` linking to the location of the resource, you can update the resource right
here, and not have to have DataMapper perform a `#read` to update the resource object.

If you're coming from an RDBMS world, you'll be familiar with sequences. Since you're here, learning how to write
adapters, I'm going to assume you're not going to be talking to a relational database. If thats the case, and you don't need
to support these kinds of sequences, you should probably use UUIDs or something similar for your identity fields. Sequences are
not scalable or distributable, they're a relic of the big RDBMSs. I only have this `#initialize_identity_field` line in there to
show how its done. As you can see, I'm not even picking it sequentially, but choosing a random number, instead, because I don't have
a resonable way to keep track of sequences. The method won't try to overwrite a value if one is already set, so take the opportunity to
use a UUID instead, and save everyone involved a bunch of trouble.%lt;/soapbox>

Because TokyoCabinet & Tyrant are key-value stores, I've written a couple helpers to try and coerce resources into a single key and 
value. First, I choose a key from the model name, and keys in the model, like so:

    def key(resource)
      model = resource.model
      key = resource.key.join('/')
      "#{model}/#{key}"
    end

We get the model, and the keys from the resource. One thing to keep in mind, is that DataMapper assumes composite keys for every model,
so even if a model has only a single key, `Resource#keys` will always return an array. We use that to build a string, like 
`Article/1234`. I chose a slash as the delimiter, because TokyoTyrant has a ReSTful interface, and it will make for pretty urls.

We also need to serialze the resource. I chose to serialize it as JSON, because its cross-platform, and lightweight. YAML or even XML would
also be ok choices, depending on what you may be interoperating with.

    def serialize(resource)
      resource.attributes(:field).to_json
    end

`resource#attributes` normally returns a Hash of `{:property_name => value}` pairs. DataMapper properties also can take an option, `:field`, 
which is used to indicate the name of the field used by the data store. Because we're writing an adapter to a data-store, thats what we want.
`#attributes` can take an optional argument to indicate what we want to use as keys. Here, I used `:field`, meaning I want the field attribute 
of the property. It will then return a Hash of the form `{"field_name" => value}` There usually won't be a difference, but its important
that adapters use the field instead of the name, so that someone writing a model can use the `:field` option to property correctly.

Let's run the spec again, and see how we did:

    dm-tokyotyrant-adapter/master % rake spec
    (in /home/rando/dev/dm-tokyotyrant-adapter)
    /usr/lib/ruby/gems/1.8/gems/rake-0.8.3/lib/rake/gempackagetask.rb:13:Warning: Gem::manage_gems is deprecated and will be removed on or after March 2009.
    ****..

    Finished in 0.009957 seconds

    6 examples, 0 failures, 4 pending

Read
----

    def read(query)
      model = query.model

      db do |db|
        keys = db.fwmkeys(model.to_s)
        records = []
        keys.each do |key|
          value = db.get(key)
          records << deserialize(value) if value
        end
        filter_records(records, query)
      end
    end

`#read` takes a DataMapper::Query object, which has everything needed to filter, sort, and limit records. For simple adapters, that don't have 
a native query language, you don't need to care. The `#filter_records` helper in AbstractAdapter will take care of everything for you. All you
need to do it provide it an Array of Hashes, using the `field` name of the property as the key. Since we use json to serialize the value, here 
we deserialize it back into a hash. We used field names as the keys, so no further translation is needed. TokyoTyrant provides the `#fwmkeys` 
method as a way to search for a key prefix, so we pass the model name in, because the model name is the first part of the key we used. We pass 
all the records we found in to `#filter_records`, which performs the filtering, and we then return the result.

Update 
------

    def update(attributes, collection)                                 # 1
      attributes = attributes_as_fields(attributes)                    # 2
      db do |db|
        collection.each do |resource|                                  # 3
          attributes = resource.attributes(:field).merge(attributes)   # 4
          save(db, key(resource), serialize(resource))                 # 5
        end
      end
    end

1. We take an `attributes` hash and a DataMapper::Collection. The `attributes` are in the form of `{Property => value}`, using the actual
   property object. A `Collection` is a set of resources. 
2. We need to convert the keys in the `attributes` has from `Property` objects into `:field` name. Luckily, AbstractAdapter provides
   `#attributes_as_fields`, which does exactly that.
3. Iterate over every resource in the collection
4. Update the attributes hash with the combination of the existing attributes, merged with the attributes we wish to update.
5. Write the whole thing back to the database.

You may also want to take a look at how the [InMemoryAdapter in dm-core][inmem-adapter] accomplishes the same task. It extracts the query 
used to build the collection, and looks for those records in its data store, using `#filter_records`. It then updates each record in-place.
Either way works fine, and the ease of which may depend upon the adapter. In TokyoTyrant, finding the records is harder than retrieving them,
so I opted to just re-save the ones I already had in the collection. An SQL adapter is able to update the records without loading them, so 
using the query is faster. ( "UPDATE {attributes} WHERE {query}" ).

Delete
------

    def delete(collection)
      db do |db|
        collection.each do |resource|
          db.delete(key(resource))
        end
      end
    end

At this point, it should all be self-explainatory. Just iterate over every resource in the colleciton, and delete its key from the db. Yay.

Conclusion
----------

And thats all there is to it. 3 hours, 2 beers, and ~100 LOC later, and we have a fully-capable adapter that can be used with DataMapper. I was
running the specs at every stage, but left them out for brevity. Here's the final run:

    dm-tokyotyrant-adapter/master % rake spec
    (in /home/rando/dev/dm-tokyotyrant-adapter)
    ......................................
    
    Finished in 0.175668 seconds
    
    38 examples, 0 failures

As I said before, the specs aren't exactly comprehensive, but they will be added to over the next few weeks. For now, they're good enough that you
can be pretty confident your adapter will work for most things.

Thanks for tuning in, leave a comment, or come visit me in #datamapper on freenode if you have any adapter questions.


[mwrc-talk]:            http://mwrc2009.confreaks.com/14-mar-2009-16-10-writing-adapters-for-datamapper-paul-sadauskas.html
[tokyotyrant]:   http://tokyocabinet.sourceforge.net/index.html
[github-dm-next]:       http://www.github.com/datamapper/dm-core/tree/next
[github-adapters1.0]:   http://www.github.com/paul/dm-core/tree/adapters_1.0
[tt-adapter]:           http://www.github.com/paul/dm-tokyotyrant-adapter
[inmem-adapter]:        http://github.com/paul/dm-core/blob/27a0277c8b00aa9d5be67a25a4113c437e4a6b34/lib/dm-core/adapters/in_memory_adapter.rb

]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>95</wp:post_id>
<wp:post_date>2009-03-30 14:33:33</wp:post_date>
<wp:post_date_gmt>2009-03-30 21:33:33</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>writing-datamapper-adapters-a-tutorial</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1238449204</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>2</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>4071</wp:comment_id>
<wp:comment_author><![CDATA[Henry Liu]]></wp:comment_author>
<wp:comment_author_email>hanyangliu@gmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>71.198.209.145</wp:comment_author_IP>
<wp:comment_date>2009-06-26 18:57:06</wp:comment_date>
<wp:comment_date_gmt>2009-06-27 00:57:06</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>Hi, I saw a comment of yours on HN saying that you successfully tested TC with a data set of ~1TB. I'm having trouble getting data into TC past my RAM size. This is after tuning the bnum, xmsiz and other parameters according to the docs. I was wondering if you could tell me what tuning params you used.</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>4073</wp:comment_id>
<wp:comment_author><![CDATA[Paul Sadauskas]]></wp:comment_author>
<wp:comment_author_email>psadauskas@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://theamazingrando.com/blog</wp:comment_author_url>
<wp:comment_author_IP>97.122.203.77</wp:comment_author_IP>
<wp:comment_date>2009-06-26 21:46:39</wp:comment_date>
<wp:comment_date_gmt>2009-06-27 03:46:39</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>Hi Henry,</p>

<p>The only trouble I've had with adding data to a large TC database was that if you're using a 32-bit arch, you need to configure tokyo with the --enable-off64 to handle databases larger than 4GB.</p>

<p>If thats not it, are you using the in-memory database? The extension off the filename you pass ttserver determines what storage engine TT uses. I do something like <code>ttserver database.tcb</code> for B+Tree.</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>2</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>Your Web Service Might Not Be RESTful If...</title>
<link>http://www.theamazingrando.com/blog/?p=107</link>
<pubDate>Mon, 20 Jul 2009 04:11:45 +0000</pubDate>
<dc:creator><![CDATA[Paul Sadauskas]]></dc:creator>

		<category><![CDATA[Web Services]]></category>

		<category domain="category" nicename="web-services"><![CDATA[Web Services]]></category>

		<category domain="tag"><![CDATA[http rest]]></category>

		<category domain="tag" nicename="http-rest"><![CDATA[http rest]]></category>

<guid isPermaLink="false">http://www.theamazingrando.com/blog/?p=107</guid>
<description></description>
<content:encoded><![CDATA[The other day, I gave a brief talk about our HTTP Library, [Resourceful][]. After a few minutes of going over the features,
it became apparent to me that very few people have taken the time to appreciate the finer points of HTTP. Everyone who 
calls themself a web application developer needs to take a few hours to read [RFC2616: Hypertext Transfer Protocol -- HTTP/1.1][rfc2616].
Its not very long, and increadibly readable for a spec. Print it out, and read a few sections when you go for your 
morning "reading library" break. Unfortunately, a great many people got confused by it, and ended up reimplementing a lot 
of http in another layer, and thats how we ended up with SOAP and XML-RPC. There's a good parable about 
[how this all went of the rails for awhile][parable], until some people re-discovered a section in  Roy T. Fielding's 
disseration, "[Representational State Transfer (REST)][rest]". 

Needless to say, REST is making a huge comeback, at least in the agile startup communities. It's fast, lightweight, and 
easy to put together. Ruby on Rails even has excellent support for getting up and running quicky. Sadly, though, it's
not quite right, and as a result, developers have misconstrued REST yet again, and its making things harder than they
really need to be, and also leading them down a path that leads to lots of headaches in the future. If you're interested
in learning more about REST, there's plenty of excellent resources on the [REST Wiki][rest-wiki], particularly 
[REST In Plain English][plain-english].

For some of my examples, I'm going to pick on the [Pivotal Tracker "RESTful" API][tracker-api]. Sorry guys, I needed to 
pick someone, and I love your product (I use it every day), but you're part of the reason for this post. I wanted to 
write a client for your service, but its really much harder than it needs to be. The service violates many of the constraints
of REST, and therefore naming it "RESTful" is incorrect. You're not the only ones, though, so don't feel bad, nearly 
EVERY API that claims to be RESTful isn't. For a look at one that gets it (mostly) right, check out [Netflix][].

# If Your Web Services Do Any of These Things, You're Doing it Wrong

1. Clients have to read documentation to know the locations of top-level resources.
2. Clients have to concatenate strings to get to the next resource.
3. You have an "API/Key/Token" in a header or a url.
4. You have a version string in a url.

## 1. Have a Minimum of Starting Points

If you look at the [Available Actions on Pivotal Tracker's API page][tracker-actions], you'll see they list several
actions that can be performed. This isn't REST, this is XML-RPC. Nearly everybody gets this one wrong. Due to the 
amount of confusion, Roy Fielding [published a post][roy-hypertext] to stop people abusing the term "RESTful" and to try 
and clarify what a real RESTful API is. His final point is:

> A REST API should be entered with no prior knowledge beyond the initial URI (bookmark) and set of standardized media 
> types that are appropriate for the intended audience (i.e., expected to be understood by any client that might use 
> the API). 

The point here is that there should be only one resource that is the starting point for any interaction with the 
service. This is called a "well-known" resource, and is never, *ever* allowed to change locations. If it does change,
you break every single client out there. By publishing a dozen or more well-known resources in their API docs, Tracker 
is no longer permitted to change any of them. This increases the maintenance burden, because now they have to maintain
all these resources for the lifetime of the application, or deprecate any third-party clients. 

If they had instead added a single resource that described the locations of these other resources, they would have much 
more flexibility in the future. An example of the content of such a resource:

    <?xml version="1.0" encoding="UTF-8"?>
    <services>
      <service>
        <name>AllProjects</name>
        <href>http://www.pivotaltracker.com/services/projects</href>
      </service>
      <service>
        <name>AllActivities</name>
        <href>http://www.pivotaltracker.com/services/activites</href>
      </service>
    </services>

*Note: Yes, they list several other actions on their API. However, each of them violates another one of the REST 
constraints, so I have ommitted them for the time being.*

Now every client just needs to know the name of the resource they're looking for, eg "AllActivites", and they can
continue as before. If, for some perfectly valid reason, Pivotal decides to change the name of "Activites" to, say,
"Actions", they only have to modify the `href` of the "AllActivities" service description, add a "AllActions" 
service, and every single client using it by the name instead of a hardcoded href continues to work flawlessly, or
at least as well as it did before. Less maintenance burden on the service developers, and no burden at all for
the developer of a well-written client.

## 2. Don't Make a Client Construct URIs

In that very same bullet point, Roy continues...

> From that point on, all application state transitions must be driven by client selection of server-provided choices 
> that are present in the received representations...

If you look at the [Tracker API docs Available API Actions][tracker-actions] for projects, you'll see "Single
project" and "All my projects". We already covered how to handle the "AllProjects" resource, an in the example above,
we remove the "Single project" resource entirely. So how do you get to the resource for a single project? Simple, you
follow its link in the "AllProjects" resource.

        <?xml version="1.0" encoding="UTF-8"?>
        <projects type="array">
          <project>
            <href>http://www.pivotaltracker.com/services/v2/projects/1</href>

            <id>1</id>
            <name>Sample Project</name>
            <iteration_length type="integer">2</iteration_length>
            <week_start_day>Monday</week_start_day>
            <point_scale>0,1,2,3</point_scale>

            <stories_href>http://www.pivotaltracker.com/services/v2/projects/1/stories?{-join|&|filter,limit,offset}</stories_href>
            <iterations_href>http://www.pivotaltracker.com/services/v2/projects/1/iterations</iterations_href>
            <activities_href>http://www.pivotaltracker.com/services/v2/projects/1/activities</activities_href>
          </project>
          <!-- ... -->
        </projects>

For a client to find a single project, they would know its name. They would GET the list of services, find "AllProjects" 
by name, GET the "href" provided, and look for the project "Sample Project" by name. They could then use the href attribute
to obtain the single resource for the project. Additionally, we also have links to all the actions in the docs that required a 
`PROJECT_ID` in the url. To get the iterations or activities for a project, a client has to only locate the project, and 
follow the links.

You should also notice the part of the `stories_href` enclosed in `{braces}`. This is known as a [URI Template][uri-template],
and is very handy. If you noticed in pivotals API docs, they had three ways of getting stories: All stories, stories by 
a filter, and stories by a limit and offset. I took the liberty of combining these into single href, using the template
to describe the query parameters. A ruby client, using the `Addressable::URI` library, could fill out that uri like this:

    template = Addressable::Template(stories_href)
    template.expand({
      "filter" => 'label:"needs feedback" type:bug'
    })

All these extra requests might seem like a rather long way of going about it, however, the advantages are immense:

Should Tracker become huge, and everybody and their grandmother starts using it to keep track of their development projects,
Tracker could outstrip the load of a single database. Since it appears they are using `AUTOINCREMENT id` columns for the 
project id, sharding the `projects` table is going to be hard. However, if they were to start using `UUID` columns for 
project ids, then sharding is a whole lot less complicated. However, if they change the project id in the API, everyone's 
clients break. If clients were to instead follow the href, they can do whatever they want to the id, and existing 
clients will have no trouble at all following.

But wait, it gets better. What happens if the service still isn't fast enough, for any number of perfectly plausible 
reasons? Because they're using hrefs, they can put *anything they want* there. Say they decide to shard the application 
servers, so every project with an odd-numbered id goes to `www1.pivotaltracker.com`, and everything even-numbered goes 
to `www2.pivotaltracker.com`. They just have to update the links, and everyone's client continues working.

If all resources are specified like this, then a client can get to every resource from that one starting point. You are 
free to move, rename, and add resources as you desire, without making things complicated for your API clients. Less
maintenance burden on you, and none on your users.

## Don't put an "API Token" in a custom header, or in the URIs

While there's nothing technically un-RESTful about this, its still annoying to your clients. And unless you have a 
full-time security expert on your staff, you probably did it wrong, and its not nearly as secure as you think it is.
It's also vulnerable to man-in-the-middle attacks and replay attacks, unless you use SSL. And if you **do** use SSL, 
then you've thrown away one of the major advantages of HTTP, which is caching. Just about every HTTP server and 
proxy are able to handle caching, and if they operate to spec, they're not allowed to cache SSL documents. I'll get 
more into caching in a future blog post, just realize that it can be immensely beneficial to the performance of your 
application, and you're going to want to do everything you can to facilitate that.

Luckily, you have a third option: HTTP Digest Authentication. Its been vetted by security professionals and time, and 
is almost certainly more secure than some secret key you've come up with. There are many varieties of Digest auth. The
one most useful for RESTful web services uses an algorithm of "MD5-sess" and Quality of Protextion (qop) of "auth". The
MD5-sess algorithm allows for 3rd-party authentication services, and not requiring the server to maintain a plaintext 
copy of the users' passwords. A qop of "auth" protects against chosen-plaintext cryptanalysis attacks, by having a 
counter incremented by the client, and a client-generated nonce. For a quick overview, Wikipedia has a [good article][digest-wiki],
and be sure to check out the spec, [RFC2617]. Here's a simple example to see whats going on. Client requests are 
denoted by `>`, with server responses `<`. This obviously isn't the whole content, just the interesting bits.

    > GET /

    < HTTP/1.1 401 Authorization Required
    < WWW-Authenticate: Digest 
                        qop="auth", 
                        realm="My RESTful Application", 
                        opaque="55dd3242dd79740cefb67528b983bc8e", 
                        algorithm=MD5-sess, 
                        nonce="MjAwOS0wNy0xOSAyMDozMToyOToxODQ2NjA6MjAxZjRiMjVjZjRiYTc0MDEwNWIwY2U2NWIxMGNjNj"

    > GET /
    > Authorization: Digest 
                     username="admin", 
                     qop="auth", 
                     realm="My RESTful Application", 
                     algorithm="MD5-sess",
                     opaque="55dd3242dd79740cefb67528b983bc8e", 
                     nonce="MjAwOS0wNy0xOSAyMDozMToyOToxODQ2NjA6MjAxZjRiMjVjZjRiYTc0MDEwNWIwY2U2NWIxMGNjNj", 
                     uri="/", 
                     nc=00000001, 
                     cnonce="Mjg5MDIz", 
                     response="1b8e5cdcd8d49ca65e3d6142567e44cf"

    < HTTP/1.1 200 OK
    < Authentication-Info: qop=auth, 
                           nc=00000001, 
                           cnonce="Mjg5MDIz", 
                           nextnonce=00000002


Digest auth works when the client make an initial request without any authentication info. The server responds with a 
401, and provides a few parameters to the client in the `WWW-Authenticate` header. The `realm` is a string used to 
identify the application.  The client uses MD5 to hash together their `username`, the `realm` and their `password`. 
This is referred to as `HA1`. When the user was created, the server did the same, and `HA1` is what is stored in the 
database. 

The client then generates a random string (the "client nonce" or `cnonce`) and increments a counter ("nonce counter" `nc`).
It hashes method as an uppercase string ("GET") and the URI ("/") together to produce `HA2`. Finally, it hashes `HA1`, 
`HA2`, the `nonce`, `nc`, `cnonce`, and `qop` all together to arrive at `response`. It packages this all up into the 
`Authorization` header, and makes the request again. The server has all the information it needs (it stored the `HA1` 
instead of the plaintext password) to hash the same parameters itself. If it arrives at the same `response`, then it 
knows the client knows the password for the user, and allows it to proceed.

Optionally, the server can provide an `Authentication-Info` header attached to the response. This provides enough 
information for the client to automatically authenticate for the next request, without having to get a 401 again.
An alternative would be to just keep using the same `nonce` over and over, but this may be subject to replay attacks.
The downside of this, though, is that the client cannot pipeline requests.

## Don't put the API version in the URI

Several web services (including Tracker's) have uris that look like `http://myapp.com/v1/projects` or 
`http://myapp.com/projects?v=2`. While this is perfectly RESTful, it seems a bit odd. From a pedantically REST-view, 
`/v1/projects/1234` and `/v2/projects/1234` are the locations of totally different resources, when, in fact, they are
simply different **representations** of the same resource. From a more practical standpoint, say a client is written 
when only version one of a service is available, and it stores ("bookmarks") some of these resources. Some time later,
the application team decides they need to release some incompatible changes to their API, so they increment the version.
Some time after that, the client upgrades to support the new version. However, the upgrade is not as clean as it might
be, because they still have the saved locations pointing to the old version. The client either needs to support *both*
versions, or write a tool that does, so it can migrate the url to their new locations. They could munge the urls, but
if one of the incompatible changes was going from integer ids to UUIDs, they have no choice.

Luckily, HTTP has a built-in solution to this problem: Content Negotiation. It makes use of two headers, `Accept` on
the client side, and `Content-Type` on the server side. The Tracker services serve everything back with a `Content-Type`
of `application/xml`. Its not just any old XML, however, it is a specific form of XML, the schema of which is described
in their API docs. This is the situation for which the use of mimetypes is intended. If every form of image out there
just used a mime-type of `image`, we'd have a much harder time of things. Luckily, there's more than that, with `image/gif`,
`image/png`, and `image/jpeg`, which all represent different encodings of images. Following the same idea, Tracker could 
instead use something like `application/vnd.pivotal.tracker.v1+xml`. Yes, its still XML, but its Pivotal Tracker Version
1 flavor of XML. Then when Pivotal decides its time for incompatible changes, they only have to add an additional content
type, `application/vnd.pivotal.tracker.v2+xml`. 

Following this idea, now a project always lives at `/projects/1234`. This is better, because while `v1` and `v2` of a 
project probably aren't different, their representations are. When a client updates versions, their links don't break, 
nor do they have to support two or more versions. 

I've only just brushed the surface of this topic. For more, [Peter Williams][peter] has an excellent discussion of it
[here][versioning1], [here][versioning2], and [here][versioning3]. (disclaimer &emdash; Peter is a former coworker and 
personal friend. This section and his posts are about a solution we came up with for a project.) 

# Now You Don't Have Any Excuses

I hope that this post serves as a good description of why you shouldn't be designing web services the way every body 
else does. It seems that everyone is just copying everyone else, without really understanding the pros and cons of the
implementations. I hope this sparks some discussion, because I don't know that these are even the best way to be doing
it, I just know from the experience of writing both applications and consumers, they way everyone is doing it now is
much more difficult than it needs to be.


[Resourceful]:    http://github.com/paul/resourceful
[rfc2616]:        http://www.w3.org/Protocols/rfc2616/rfc2616.html
[rest]:           http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm
[parable]:        http://serialseb.blogspot.com/2009/06/fighting-for-rest-or-tale-of-ice-cream.html
[rest-wiki]:      http://rest.blueoxen.net/cgi-bin/wiki.pl?FrontPage
[plain-english]:  http://rest.blueoxen.net/cgi-bin/wiki.pl?RestInPlainEnglish
[tracker-api]:    http://www.pivotaltracker.com/help/api
[Netflix]:        http://developer.netflix.com/docs
[tracker-actions]: http://www.pivotaltracker.com/help/api#api_actions
[roy-hypertext]:  http://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven
[uri-template]:   http://bitworking.org/projects/URI-Templates/
[digest-wiki]:    http://en.wikipedia.org/wiki/Digest_access_authentication
[RFC2617]:        http://www.ietf.org/rfc/rfc2617.txt
[peter]:          http://barelyenough.org
[versioning1]:    http://barelyenough.org/blog/2008/05/versioning-rest-web-services/
[versioning2]:    http://barelyenough.org/blog/2008/05/versioning-rest-web-services-tricks-and-tips/
[versioning3]:    http://barelyenough.org/blog/2008/05/resthttp-service-versioning-reponse-to-jean-jacques-dubray/
]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>107</wp:post_id>
<wp:post_date>2009-07-19 22:11:45</wp:post_date>
<wp:post_date_gmt>2009-07-20 04:11:45</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>your-web-service-might-not-be-restful-if</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1262472229</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>2</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>4562</wp:comment_id>
<wp:comment_author><![CDATA[Ernesto]]></wp:comment_author>
<wp:comment_author_email>ernesto@gnapse.com</wp:comment_author_email>
<wp:comment_author_url>http://gnapse.com/</wp:comment_author_url>
<wp:comment_author_IP>200.55.178.50</wp:comment_author_IP>
<wp:comment_date>2009-08-05 14:48:34</wp:comment_date>
<wp:comment_date_gmt>2009-08-05 20:48:34</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>Hi Paul,</p>

<p>I like your article and I understand your point of view and the need for "getting it right". But I still have a couple to doubts, some even related to past comments in this entry.</p>

<p>First issue...</p>

<p>For instance, Michael S. asks in comment #6 above about searching to avoid clients to retrieve (GET) all resources of a given kind to then find/navigate to a specific one.</p>

<p>You then answered in comment #13 with "suggestions". But since clients ignore any specifics about the API of a system, and need only to know a single entry point with hyperlinks to the available services, how are clients suppose to "discover" or learn how to search? I mean, they might learn that product resources can be find at "/products", but if they want to filter or search within all products, how do they know what querystring parameter to use, or any other implementation specification to search this resources?</p>

<p>And the second issue, which is not a doubt but a rant. Ruby on Rails, which on one hand has contributed a lot by "spreading the word" of restul interfaces (I first knew about REST from rails) but today with your article and roy fielding's original dissertation about it, I have learned that rails, far from helping, has spread the wrong idea about what a RESTful interface is, because rails is not [fully] compliant.</p>

<p>Rails relies on a predetermined URI structure, but when a design implementation changes this structure, all clients get broken. ActiveResource, for instance, relies heavily on this. And I have learned today all this and I feel so bad. It's preferable not to adopt it at all, than to wrongly adopt it.</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>4806</wp:comment_id>
<wp:comment_author><![CDATA[Cool articles – SEO, blogging, internet marketing(july19-august16 2009) &laquo; Stefanm, my link collection]]></wp:comment_author>
<wp:comment_author_email></wp:comment_author_email>
<wp:comment_author_url>http://stefanm.wordpress.com/2009/08/18/cool-articles-%e2%80%93-seo-blogging-internet-marketingjuly19-august16-2009/</wp:comment_author_url>
<wp:comment_author_IP>74.200.245.189</wp:comment_author_IP>
<wp:comment_date>2009-08-18 08:52:18</wp:comment_date>
<wp:comment_date_gmt>2009-08-18 14:52:18</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>[...] Your Web Service Might Not Be RESTful If you have a API/Key/Token in a header/URL, have a version st...; [...]</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type>pingback</wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>7212</wp:comment_id>
<wp:comment_author><![CDATA[Hedgehog]]></wp:comment_author>
<wp:comment_author_email>hedghogshiatus@gmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>115.70.45.52</wp:comment_author_IP>
<wp:comment_date>2010-02-06 20:41:36</wp:comment_date>
<wp:comment_date_gmt>2010-02-07 02:41:36</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>Doesn't Roy explicitly contradict your second point, "'Don’t Make a Client Construct URIs" ?</p>

<p>Specifically:
"Instead, allow servers to instruct clients on how to construct appropriate URIs, such as is done in HTML forms and URI templates, by defining those instructions within media types and link relations."</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>4361</wp:comment_id>
<wp:comment_author><![CDATA[Kent Brewster]]></wp:comment_author>
<wp:comment_author_email>kent_brewster@yahoo.com</wp:comment_author_email>
<wp:comment_author_url>http://kentbrewster.com</wp:comment_author_url>
<wp:comment_author_IP>67.180.35.165</wp:comment_author_IP>
<wp:comment_date>2009-07-21 07:57:23</wp:comment_date>
<wp:comment_date_gmt>2009-07-21 13:57:23</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>Hi, Paul. This is a great jumping-off point for discussion, and I'm glad to hear we're getting it mostly right at Netflix. :)</p>

<p>I'd be interested to hear your take--and the opinions of the folks commenting here, who seem to be a smart, thoughtful bunch--on least odious compromises for API providers who must support Flash, OAuth, JSON-P, and other services and protocols that don't have access to HTTP headers or verbs beyond GET and POST.</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>4364</wp:comment_id>
<wp:comment_author><![CDATA[bex]]></wp:comment_author>
<wp:comment_author_email>bex@bexhuff.com</wp:comment_author_email>
<wp:comment_author_url>http://bexhuff.com/</wp:comment_author_url>
<wp:comment_author_IP>75.72.22.144</wp:comment_author_IP>
<wp:comment_date>2009-07-21 09:26:34</wp:comment_date>
<wp:comment_date_gmt>2009-07-21 15:26:34</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>First you say:</p>

<p>"there should be only one resource that is the starting point for any interaction with the service. This is called a 'well-known' resource, and is never, ever allowed to change locations"</p>

<p>Then you say that you should never have version numbers in your URI. Stuff like this is forbidden:</p>

<p>/v1/project/1234
/v2/project/1234</p>

<p>That pretty much means that you will be permanently stuck with whatever information architecture you start out with. If you don't organize your data 100% correctly the first time -- which nobody does -- you're kind of screwed.</p>

<p>Having a version number in the URI makes tons of sense to me...</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>4766</wp:comment_id>
<wp:comment_author><![CDATA[&raquo; links for 2009-08-15 (Dhananjay Nene)]]></wp:comment_author>
<wp:comment_author_email></wp:comment_author_email>
<wp:comment_author_url>http://dhananjaynene.com/2009/08/16/links-for-2009-08-15/</wp:comment_author_url>
<wp:comment_author_IP>74.220.207.200</wp:comment_author_IP>
<wp:comment_date>2009-08-15 14:01:53</wp:comment_date>
<wp:comment_date_gmt>2009-08-15 20:01:53</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>[...] The Amazing Blog : Your Web Service Might Not Be RESTful If… (tags: rest) [...]</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type>pingback</wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>6832</wp:comment_id>
<wp:comment_author><![CDATA[ABRAR]]></wp:comment_author>
<wp:comment_author_email>chottabem@yahoo.com</wp:comment_author_email>
<wp:comment_author_url>http://WWW.4URTUBE.BLOGSPOT.COM</wp:comment_author_url>
<wp:comment_author_IP>119.153.51.90</wp:comment_author_IP>
<wp:comment_date>2009-12-26 05:39:16</wp:comment_date>
<wp:comment_date_gmt>2009-12-26 11:39:16</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>AMAING VIDEOS &gt;&gt;&gt;WWW.4URTUBE.BLOGSPOT.COM</p>

<p>200++ TV CHANNELS   WWW.4URTV.BLOGSPOT.COM</p>

<p>SEND FREE SMS IN PAKISTAN ANY NETWORK UNLEMITED &amp; SEND FREE SMS IN WORLD    WWW.4URFREESMS.BLOGSPOT.COM</p>

<p>FREE CHAT ROOM IN PAKISTAN &amp; AND  ALL WORLD
WWW.4URCHATROOM.BLOGSPOT.COM</p>

<p>WWW.PAKDESK.TK</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>4292</wp:comment_id>
<wp:comment_author><![CDATA[Avdi Grimm]]></wp:comment_author>
<wp:comment_author_email>avdi@avdi.org</wp:comment_author_email>
<wp:comment_author_url>http://avdi.org/devblog</wp:comment_author_url>
<wp:comment_author_IP>71.58.195.219</wp:comment_author_IP>
<wp:comment_date>2009-07-19 23:29:05</wp:comment_date>
<wp:comment_date_gmt>2009-07-20 05:29:05</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>Thank you, thank you, thank you for writing this.     Some of the services calling themselves "RESTful" make me want to throw things.  Specifically, they make me want to get a hardbound copy of RFC2616 and throw itat their developers' heads.   I read 2616 a long time ago and I don't understand why so few "web developers" can be bothered to do so.</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>4295</wp:comment_id>
<wp:comment_author><![CDATA[Mike]]></wp:comment_author>
<wp:comment_author_email>mikessd@gmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>99.241.150.105</wp:comment_author_IP>
<wp:comment_date>2009-07-20 00:43:22</wp:comment_date>
<wp:comment_date_gmt>2009-07-20 06:43:22</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>Seriously, who cares if an API doesn't fully comply with your dogma? No API out there passes your "purity" test and people choose what works and what's easy for developers. These kinds of BS 'religious doctrine' commandments are detrimental to progress.</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>4301</wp:comment_id>
<wp:comment_author><![CDATA[To REST or not to REST]]></wp:comment_author>
<wp:comment_author_email></wp:comment_author_email>
<wp:comment_author_url>http://unfoldingtheweb.com/2009/07/20/to-rest-or-not-to-rest/</wp:comment_author_url>
<wp:comment_author_IP>208.97.167.14</wp:comment_author_IP>
<wp:comment_date>2009-07-20 02:42:02</wp:comment_date>
<wp:comment_date_gmt>2009-07-20 08:42:02</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>[...] Sadauskas, on another article about the same subject, adds some rules that your API should not [...]</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type>pingback</wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>4302</wp:comment_id>
<wp:comment_author><![CDATA[Toby]]></wp:comment_author>
<wp:comment_author_email>toby.o.h.white@gmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>78.105.202.8</wp:comment_author_IP>
<wp:comment_date>2009-07-20 03:00:34</wp:comment_date>
<wp:comment_date_gmt>2009-07-20 09:00:34</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>All very good except this bit:</p>

<p>" Just about every HTTP server and proxy are able to handle caching, and if they operate to spec, they’re not allowed to cache SSL documents."</p>

<p>This is not even slightly true. There is nothing in any specification to suggest that caching behaviour should change according to whether SSL is used at the transport layer.</p>

<p>Which means that in fact, you <em>should</em> use SSL as much as possible, to avoid MITM/credential sniffing attacks.</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>4303</wp:comment_id>
<wp:comment_author><![CDATA[The Amazing Blog : Your Web Service Might Not Be RESTful If… &laquo; Netcrema - creme de la social news via digg + delicious + stumpleupon + reddit]]></wp:comment_author>
<wp:comment_author_email></wp:comment_author_email>
<wp:comment_author_url>http://www.netcrema.com/?p=8037</wp:comment_author_url>
<wp:comment_author_IP>85.13.140.216</wp:comment_author_IP>
<wp:comment_date>2009-07-20 03:10:26</wp:comment_date>
<wp:comment_date_gmt>2009-07-20 09:10:26</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>[...] The Amazing Blog : Your Web Service Might Not Be RESTful If…theamazingrando.com [...]</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type>pingback</wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>4304</wp:comment_id>
<wp:comment_author><![CDATA[popurls.com // popular today]]></wp:comment_author>
<wp:comment_author_email></wp:comment_author_email>
<wp:comment_author_url>http://popurls.com/pop/</wp:comment_author_url>
<wp:comment_author_IP>92.51.132.180</wp:comment_author_IP>
<wp:comment_date>2009-07-20 03:20:11</wp:comment_date>
<wp:comment_date_gmt>2009-07-20 09:20:11</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>[...] Clogged Toilet At Space Station&nbsp;Lifehacker, tips and downloads for getting things donedeliciousThe Amazing Blog : Your Web Service Might Not Be RESTful IfSEOmoz | 10 Steps to Advanced Keyword Researchxkcd - A Webcomic - Estimation22 Very Useful Adobe [...]</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type>pingback</wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>4358</wp:comment_id>
<wp:comment_author><![CDATA[Daily Links for Tuesday, July 21th, 2009]]></wp:comment_author>
<wp:comment_author_email></wp:comment_author_email>
<wp:comment_author_url>http://www.kygeek.com/daily-links/daily-links-for-tuesday-july-21th-2009</wp:comment_author_url>
<wp:comment_author_IP>72.47.224.25</wp:comment_author_IP>
<wp:comment_date>2009-07-21 05:46:52</wp:comment_date>
<wp:comment_date_gmt>2009-07-21 11:46:52</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>[...] The Amazing Blog : Your Web Service Might Not Be RESTful If… [...]</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type>pingback</wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>4418</wp:comment_id>
<wp:comment_author><![CDATA[Scott Banwart&#8217;s Blog &raquo; Blog Archive &raquo; Distributed Weekly 7]]></wp:comment_author>
<wp:comment_author_email></wp:comment_author_email>
<wp:comment_author_url>http://rogue-technology.com/blog/?p=501</wp:comment_author_url>
<wp:comment_author_IP>205.196.222.9</wp:comment_author_IP>
<wp:comment_date>2009-07-24 07:04:41</wp:comment_date>
<wp:comment_date_gmt>2009-07-24 13:04:41</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>[...] Your Web Service Might Not Be RESTful If… [...]</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type>pingback</wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>4432</wp:comment_id>
<wp:comment_author><![CDATA[Rob Heittman]]></wp:comment_author>
<wp:comment_author_email>rob.heittman@solertium.com</wp:comment_author_email>
<wp:comment_author_url>http://solertium.com/rob</wp:comment_author_url>
<wp:comment_author_IP>96.238.71.112</wp:comment_author_IP>
<wp:comment_date>2009-07-25 08:36:21</wp:comment_date>
<wp:comment_date_gmt>2009-07-25 14:36:21</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>Good article.  I also agree with August -- following this guidance produces a better API.  It's not just pedantry.</p>

<p>Still, there may be occasional valid reasons to diverge, usually in especially complex cases:  Amazon certainly thought out their S3 authentication scheme carefully, though it is outside this guidance.</p>

<p>I'm not convinced about versioned APIs.  I fully agree this practice should be minimized, and I've seen it abused.  But I also know of lots of cases where the API significantly and incompatibly differs and there is a user base reliant on a previous version.  I am imagining a developer with a widely used REST API reads this blog post and goes back and rethinks their design (e.g. minimizing the starting points) -- content negotiation alone might not cover the differences.</p>

<p>So if a developer is not sure their REST API is correct, final, or long-term supportable, proactively introducing a version number is probably a good defensive practice giving you more flexibility to get it right in the future.  IIRC Richardson and Ruby had stuff to say about this in their O'Reilly book, which has led many developers to REST, and may account for the prevalance of this practice.</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>4446</wp:comment_id>
<wp:comment_author><![CDATA[Code Mongrel | Episode 2: A Festivus for the REST of us!]]></wp:comment_author>
<wp:comment_author_email></wp:comment_author_email>
<wp:comment_author_url>http://www.codemongrel.com/episode-2-a-festivus-for-the-rest-of-us/</wp:comment_author_url>
<wp:comment_author_IP>173.45.238.37</wp:comment_author_IP>
<wp:comment_date>2009-07-27 04:03:59</wp:comment_date>
<wp:comment_date_gmt>2009-07-27 10:03:59</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>[...] Your Web Service Might Not Be RESTful If… [...]</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type>pingback</wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>4308</wp:comment_id>
<wp:comment_author><![CDATA[August Lilleaas]]></wp:comment_author>
<wp:comment_author_email>augustlilleaas@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://august.lilleaas.net/</wp:comment_author_url>
<wp:comment_author_IP>80.203.21.2</wp:comment_author_IP>
<wp:comment_date>2009-07-20 05:05:54</wp:comment_date>
<wp:comment_date_gmt>2009-07-20 11:05:54</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>Woha! That was certainly a wake-up call. The best part is that all of these four steps makes your API more awesome, not more pedantic. Thanks!</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>4314</wp:comment_id>
<wp:comment_author><![CDATA[Matt]]></wp:comment_author>
<wp:comment_author_email>matt@matthanger.net</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>168.215.198.8</wp:comment_author_IP>
<wp:comment_date>2009-07-20 06:35:35</wp:comment_date>
<wp:comment_date_gmt>2009-07-20 12:35:35</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>Paul, this is great, thanks for posting. I do have a question however regarding your idea of mutable/changing/dynamic resource URLs.</p>

<p>You mention 'bookmarks': "From a more practical standpoint, say a client is written when only version one of a service is available, and it stores (”bookmarks”) some of these resources..."</p>

<p>However, some other information you present appears to be impractical in the presence of bookmarks:</p>

<p>"By publishing a dozen or more well-known resources in their API docs, Tracker is no longer permitted to change any of them. This increases the maintenance burden, because now they have to maintain all these resources for the lifetime of the application, or deprecate any third-party clients."</p>

<p>Isn't this true anyway, if we assume that resources will be bookmarked?</p>

<p>""If clients were to instead follow the href, they can do whatever they want to the id, and existing clients will have no trouble at all following.""</p>

<p>Again, this appears to be a false statement if we assume bookmarks.</p>

<p>It seems to me, that once any resource URL is published, then that URL should be immutable and never change... either that or we should discourage bookmarking.</p>

<p>Can you help clarify this issue?</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>4315</wp:comment_id>
<wp:comment_author><![CDATA[Michael S.]]></wp:comment_author>
<wp:comment_author_email>mjs@beebo.org</wp:comment_author_email>
<wp:comment_author_url>http://beebo.org/</wp:comment_author_url>
<wp:comment_author_IP>132.185.240.124</wp:comment_author_IP>
<wp:comment_date>2009-07-20 06:44:28</wp:comment_date>
<wp:comment_date_gmt>2009-07-20 12:44:28</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>How should a RESTful service handle search?  e.g. list of products matching "xxx", top selling products, most frequently viewed.  What verb should be used?</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>4367</wp:comment_id>
<wp:comment_author><![CDATA[Dan Yoder]]></wp:comment_author>
<wp:comment_author_email>dan@zeraweb.com</wp:comment_author_email>
<wp:comment_author_url>http://dev.zeraweb.com/</wp:comment_author_url>
<wp:comment_author_IP>67.159.166.38</wp:comment_author_IP>
<wp:comment_date>2009-07-21 14:20:38</wp:comment_date>
<wp:comment_date_gmt>2009-07-21 20:20:38</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>I think this is great stuff. I'd like to point out that I've been trying to talk to some of the same issues on my blog. We need to get better at REST: there is so much potential here being wasted because we're stuck on the browser.</p>

<p>@John/@Kent - One solution is proxies that repackage the requests when a "dumb" User Agent shows up. One can also offer these clients a more limited API (because it will be intrinsically more brittle and thus more expensive to support) to encourage them to use another client. Hopefully, this, in turn, encourages vendors to improve their support for HTTP, proper.</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>4584</wp:comment_id>
<wp:comment_author><![CDATA[Resting on Rails considered harmful &#8211; gnapse.com]]></wp:comment_author>
<wp:comment_author_email></wp:comment_author_email>
<wp:comment_author_url>http://gnapse.com/blog/2009/08/06/resting-on-rails-considered-harmful/</wp:comment_author_url>
<wp:comment_author_IP>66.71.247.218</wp:comment_author_IP>
<wp:comment_date>2009-08-06 13:59:20</wp:comment_date>
<wp:comment_date_gmt>2009-08-06 19:59:20</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>[...] perhaps more digestible and to the point than this paper is a blog post recently published by Paul Sandauskas in his blog, where he warns developer about not being fully [...]</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type>pingback</wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>4385</wp:comment_id>
<wp:comment_author><![CDATA[William Pietri]]></wp:comment_author>
<wp:comment_author_email>william-theamazingrando.com@scissor.com</wp:comment_author_email>
<wp:comment_author_url>http://agilefocus.com/</wp:comment_author_url>
<wp:comment_author_IP>74.85.7.130</wp:comment_author_IP>
<wp:comment_date>2009-07-22 15:38:13</wp:comment_date>
<wp:comment_date_gmt>2009-07-22 21:38:13</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>Great article.</p>

<p>Regarding Flash: Yes, it currently has poor support for RESTful APIs. That will never change if we build all APIs to coddle the world's least-capable library.</p>

<p>As a bridge, I recommend something like the Restlet TunnelService:</p>

<p>http://www.restlet.org/documentation/2.0/api/org/restlet/service/TunnelService.html</p>

<p>This lets you isolate the nonsense on the server side, and a similar bit of abstraction lets you limit the client-side mess. With the exception of those shims, the rest of your code on both sides can be properly RESTful.</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>4316</wp:comment_id>
<wp:comment_author><![CDATA[Jonathan Freedman]]></wp:comment_author>
<wp:comment_author_email>rewt@eghetto.ca</wp:comment_author_email>
<wp:comment_author_url>http://twitter.com/otakup0pe/</wp:comment_author_url>
<wp:comment_author_IP>206.248.167.227</wp:comment_author_IP>
<wp:comment_date>2009-07-20 07:12:51</wp:comment_date>
<wp:comment_date_gmt>2009-07-20 13:12:51</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>Great read. Makes me think of the "let's return a 500 server error with status 200" crowd.</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>4320</wp:comment_id>
<wp:comment_author><![CDATA[Ilia Jerebtsov]]></wp:comment_author>
<wp:comment_author_email>iamsunstorm@hotmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>195.23.23.239</wp:comment_author_IP>
<wp:comment_date>2009-07-20 07:43:37</wp:comment_date>
<wp:comment_date_gmt>2009-07-20 13:43:37</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>You have to consider the implementation. In your methodology, if I want to access a resource of which I already have an ID (a common need), I need to go through your AllProjects resource to find it. That means that your server has to load up a huge list of projects, just so I can retrieve one. That's fine if you have a few projects, but it does not scale.</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>4321</wp:comment_id>
<wp:comment_author><![CDATA[Matthew]]></wp:comment_author>
<wp:comment_author_email>matthew.willson@gmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>94.195.198.81</wp:comment_author_IP>
<wp:comment_date>2009-07-20 08:25:24</wp:comment_date>
<wp:comment_date_gmt>2009-07-20 14:25:24</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>Another part of REST which people often get wrong (in a well-intentioned way) is the use of PUT for partial update operations.</p>

<p>In fact, PUT is specified for 'complete replacement', not 'partial update'. It's supposed to replace what's current at that URI with the entire request body of the PUT.</p>

<p>If you want to do partial update restfully, there's a few options:</p>

<p>Put to a subresource URL, eg /user/123/email_address
POST to a special update URL, eg /user/123/update</p>

<p>(Note these both require some kind of structured link or link template to the subresource / update URLs from the main resource)</p>

<p>Use the PATCH method: http://tools.ietf.org/html/draft-dusseault-http-patch-13 which (IIRC) fielding says can virtually be treated as part of the HTTP spec. Note you can tunnel PATCH over POST if needs be in the same way people are tunnelling PUT and DELETE over POST.</p>

<p>Note that 'PUT to subresource' does have an advantage over POST and PATCH in that the use of PUT guarantees it to be idempotent to any middleware.</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>4322</wp:comment_id>
<wp:comment_author><![CDATA[30 fresh design related links! &laquo; Adrian Zyzik&#8217;s Weblog]]></wp:comment_author>
<wp:comment_author_email></wp:comment_author_email>
<wp:comment_author_url>http://zyzik.wordpress.com/2009/07/20/30-fresh-design-related-links/</wp:comment_author_url>
<wp:comment_author_IP>72.233.96.191</wp:comment_author_IP>
<wp:comment_date>2009-07-20 09:19:41</wp:comment_date>
<wp:comment_date_gmt>2009-07-20 15:19:41</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>[...] Illustrator Tutorials Web Design Ledger 50+ Fresh and Unique Personal Portfolio Websites Noupe The Amazing Blog : Your Web Service Might Not Be RESTful If 15 Plugins to Unleash the Invincible Power of jQuery and WordPress QuickFlip 2: The jQuery Flipping [...]</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type>pingback</wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>4323</wp:comment_id>
<wp:comment_author><![CDATA[John Boxall]]></wp:comment_author>
<wp:comment_author_email>john@mobify.me</wp:comment_author_email>
<wp:comment_author_url>http://mobify.me</wp:comment_author_url>
<wp:comment_author_IP>99.185.244.126</wp:comment_author_IP>
<wp:comment_date>2009-07-20 09:34:02</wp:comment_date>
<wp:comment_date_gmt>2009-07-20 15:34:02</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>Following REST to the letter restricts client applications. How do you make a HEAD/PUT request in Flash? How do you change the accept HTTP headers?</p>

<p>You might find Jacob Kaplan-Moss' REST Worst Practices relevant: 
http://jacobian.org/writing/rest-worst-practices/</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>4325</wp:comment_id>
<wp:comment_author><![CDATA[Paul Sadauskas]]></wp:comment_author>
<wp:comment_author_email>psadauskas@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://theamazingrando.com/blog</wp:comment_author_url>
<wp:comment_author_IP>64.15.110.115</wp:comment_author_IP>
<wp:comment_date>2009-07-20 11:25:27</wp:comment_date>
<wp:comment_date_gmt>2009-07-20 17:25:27</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>@mike: It's not dogma, I tried to list very practical and pragmatic reasons for doing it this way, the primary concern of which is to make things <em>easier</em> on developers, both future maintainers, and client writers.</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>2</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>4326</wp:comment_id>
<wp:comment_author><![CDATA[Paul Sadauskas]]></wp:comment_author>
<wp:comment_author_email>psadauskas@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://theamazingrando.com/blog</wp:comment_author_url>
<wp:comment_author_IP>64.15.110.115</wp:comment_author_IP>
<wp:comment_date>2009-07-20 11:27:49</wp:comment_date>
<wp:comment_date_gmt>2009-07-20 17:27:49</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>@Toby: No, an intermediate proxy cannot cache a document encrypted with SSL. Since everything (headers, body, uri) is all encrypted, how does it know what to cache?</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>2</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>4327</wp:comment_id>
<wp:comment_author><![CDATA[Paul Sadauskas]]></wp:comment_author>
<wp:comment_author_email>psadauskas@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://theamazingrando.com/blog</wp:comment_author_url>
<wp:comment_author_IP>64.15.110.115</wp:comment_author_IP>
<wp:comment_date>2009-07-20 11:29:45</wp:comment_date>
<wp:comment_date_gmt>2009-07-20 17:29:45</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>@Michael S.: By using a GET, with different resources.  I would suggest, for each of your examples:</p>

<pre><code>/products?q=xxx
/products/top_selling
/products/frequently_viewed
</code></pre>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>2</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>4328</wp:comment_id>
<wp:comment_author><![CDATA[Paul Sadauskas]]></wp:comment_author>
<wp:comment_author_email>psadauskas@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://theamazingrando.com/blog</wp:comment_author_url>
<wp:comment_author_IP>64.15.110.115</wp:comment_author_IP>
<wp:comment_date>2009-07-20 11:35:12</wp:comment_date>
<wp:comment_date_gmt>2009-07-20 17:35:12</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>@Matt: If you do decide to move some of the existing resources, I would expect that you would also make use of the 301 Moved Permanetly response for the ones that moved. That way, a client can automatically update their bookmarks. A resource is not immutable, as long as the change is not one that breaks the API.</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>2</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>4329</wp:comment_id>
<wp:comment_author><![CDATA[foo]]></wp:comment_author>
<wp:comment_author_email>foo@example.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>146.145.38.26</wp:comment_author_IP>
<wp:comment_date>2009-07-20 11:38:04</wp:comment_date>
<wp:comment_date_gmt>2009-07-20 17:38:04</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>Using full urls for ids becomes impractical when you need to lay REST on top of existing db.</p>

<p>If i have a record A that links to record B by some kind of id. I can have http://api/B/ in my record A. But if I want my users to be able to update record I have to validate, resolve and then destructure the url to extract the id.</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>4330</wp:comment_id>
<wp:comment_author><![CDATA[Paul Sadauskas]]></wp:comment_author>
<wp:comment_author_email>psadauskas@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://theamazingrando.com/blog</wp:comment_author_url>
<wp:comment_author_IP>64.15.110.115</wp:comment_author_IP>
<wp:comment_date>2009-07-20 11:38:30</wp:comment_date>
<wp:comment_date_gmt>2009-07-20 17:38:30</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>@Ilia Jerebtsov: It's perfectly scalable. If the list really does get huge, there are plenty of methods available to mitigate the performance loss: pagination, caching, pre-build the document, or provide a search mechanism. I counter that providing an ID and asking the client to construct a url is not scalable, because then you cannot reorganize your resources, or move them across servers, or ever change the url scheme.</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>2</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>4332</wp:comment_id>
<wp:comment_author><![CDATA[Paul Sadauskas]]></wp:comment_author>
<wp:comment_author_email>psadauskas@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://theamazingrando.com/blog</wp:comment_author_url>
<wp:comment_author_IP>64.15.110.115</wp:comment_author_IP>
<wp:comment_date>2009-07-20 11:40:33</wp:comment_date>
<wp:comment_date_gmt>2009-07-20 17:40:33</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>@John Boxall: I don't use flash, so I wouldn't know. If it doesn't allow you to use all the verbs in the http spec, or manipulate headers, I doubt that I ever will. It seems like a pretty huge deficiency.</p>

<p>Also, I don't see what that has to do with any of the points I made.</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>2</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>4333</wp:comment_id>
<wp:comment_author><![CDATA[Paul Sadauskas]]></wp:comment_author>
<wp:comment_author_email>psadauskas@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://theamazingrando.com/blog</wp:comment_author_url>
<wp:comment_author_IP>64.15.110.115</wp:comment_author_IP>
<wp:comment_date>2009-07-20 11:43:39</wp:comment_date>
<wp:comment_date_gmt>2009-07-20 17:43:39</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>@foo: That method is correct, but its hardly impractical. You must have code that already does that, because your application already extracted an ID of "A" from <code>/api/A</code> to be able to find the resource in the database. There's no reason why you couldn't use the same code path to extract "B" from <code>/api/B</code>. Far from being impractical, its trivial.</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>2</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>4335</wp:comment_id>
<wp:comment_author><![CDATA[Joe Fiorini]]></wp:comment_author>
<wp:comment_author_email>joe@faithfulgeek.org</wp:comment_author_email>
<wp:comment_author_url>http://faithfulgeek.org</wp:comment_author_url>
<wp:comment_author_IP>69.54.60.58</wp:comment_author_IP>
<wp:comment_date>2009-07-20 12:23:06</wp:comment_date>
<wp:comment_date_gmt>2009-07-20 18:23:06</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>@Paul First off, thanks for this post. I learned RESTful Services from the Sam Ruby book and even gave a few talks on it. Conversations (somewhat heated ones) with an attendee showed me that my understanding was wrong. Thanks to your post I now understand how to do it right. Word.</p>

<p>Second, a question on your response to @Ilia: if I have the id of a resource, I theoretically could have a resource off / called "products". I would access the "products" resource and give it a filter parameter of "id" to get that one resource, correct? Would that be an example of what you meant by "provide a search mechanism"?</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>4336</wp:comment_id>
<wp:comment_author><![CDATA[Paul Sadauskas]]></wp:comment_author>
<wp:comment_author_email>psadauskas@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://theamazingrando.com/blog</wp:comment_author_url>
<wp:comment_author_IP>64.15.110.115</wp:comment_author_IP>
<wp:comment_date>2009-07-20 12:39:46</wp:comment_date>
<wp:comment_date_gmt>2009-07-20 18:39:46</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>@Joe Fiorini: Thanks for your kind words. Yes, REST is a rather orthagonal concept to what we're used to. It took me quite awhile to get it figured out as well, and I'm still learning.</p>

<p>As for your question, I would never expose an ID anywhere. To me, the way of uniquely identifying a resource is its "Universal Resource Identifier". If you are looking for a particlular resource, I would use the same criteria to find it as you do to know which one you're looking for, ie, "projects with a name of 'My Project'". Perhaps the resource would be <code>/projects?filter=name:My%20Project</code>.</p>

<p>But thats only in the case when you have an extreme number of projects. More likely, you only have a few belonging to a single user or account, so its feasible to get the entire list and grep it for the criteria you're looking for, without ever having to implement the search/filtering API.</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>2</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>4339</wp:comment_id>
<wp:comment_author><![CDATA[Coda Hale]]></wp:comment_author>
<wp:comment_author_email>coda.hale@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://codahale.com</wp:comment_author_url>
<wp:comment_author_IP>76.235.71.129</wp:comment_author_IP>
<wp:comment_date>2009-07-20 15:14:35</wp:comment_date>
<wp:comment_date_gmt>2009-07-20 21:14:35</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>@Jonathan Freedman: Funny story—Apache and mod_proxy don't play well with ErrorDocument, returning in error documents served as 200s. There's a <a href="https://issues.apache.org/bugzilla/show_bug.cgi?id=47106" rel="nofollow">open bug</a> for it.</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>4341</wp:comment_id>
<wp:comment_author><![CDATA[Is this RESTful? at subbu.org]]></wp:comment_author>
<wp:comment_author_email></wp:comment_author_email>
<wp:comment_author_url>http://www.subbu.org/blog/2009/07/is-this-restful</wp:comment_author_url>
<wp:comment_author_IP>67.207.142.40</wp:comment_author_IP>
<wp:comment_date>2009-07-20 15:55:17</wp:comment_date>
<wp:comment_date_gmt>2009-07-20 21:55:17</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>[...] have been holding off this post for over a month. But having seen the latest post titled Your Web Service Might Not Be RESTful If… by Paul Sadauskas, I am motivated to publish this (not that his post is dogmatic &#8211; it is [...]</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type>pingback</wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>4348</wp:comment_id>
<wp:comment_author><![CDATA[John Boxall]]></wp:comment_author>
<wp:comment_author_email>john@mobify.me</wp:comment_author_email>
<wp:comment_author_url>http://mobify.me</wp:comment_author_url>
<wp:comment_author_IP>99.185.244.126</wp:comment_author_IP>
<wp:comment_date>2009-07-20 18:11:34</wp:comment_date>
<wp:comment_date_gmt>2009-07-21 00:11:34</wp:comment_date_gmt>
<wp:comment_content><![CDATA[<p>@Paul - By providing versioning through content negotiation you limit what tools people can use to build against your API.</p>

<p>"I don’t use flash, so I wouldn’t know. If it doesn’t allow you to use all the verbs in the http spec, or manipulate headers, I doubt that I ever will. It seems like a pretty huge deficiency."</p>

<p>Certainly it is, but it's reality.</p>

<p>Just as it is unacceptable for large sites to ditch IE support, it's unacceptable for large APIs to ditch support for limited client libraries.</p>
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
</channel>
</rss>
